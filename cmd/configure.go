/*
Copyright Â© 2021 Fabian Suhrau <fabian.suhrau@me.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package cmd

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"path/filepath"
	"strings"

	"github.com/fsuhrau/automationhub/config"
	"github.com/spf13/cobra"
	"gopkg.in/yaml.v2"
)

// configureCmd represents the configure command
var configureCmd = &cobra.Command{
	Use:   "configure",
	Short: "create a configuration to run the hub",
	Long:  `wizard to create a configuration to your needs.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		var cfg config.Service
		cfg.DeviceManager = make(map[string]config.Manager)
		reader := bufio.NewReader(os.Stdin)
		fmt.Println("Welcome to the configuration wizard.")
		fmt.Println("you can cancel the wizard any time by Ctrl+C")
		fmt.Println("------------------------------------")
		fmt.Println("")
		fmt.Println("Basic Service Setup")
		fmt.Println("-------------------")
		// auto detect ip
		fmt.Println("To run tests each device needs to know which ip to connect to.")
		fmt.Println("This hub is able to auto detect an external ip on startup or you can set a fixed one.")
		fmt.Println("")
		input := validateInput(reader, "Auto detect service ip on startup? (y/n)", []string{"y", "n"})
		if input == "y" {
			cfg.Autodetect = true
		}
		fmt.Println("")
		if !cfg.Autodetect {
			input := readValidIP(reader, "Set static ip. (format: 0.0.0.0)")
			cfg.HostIP = input
		}
		fmt.Println("------------------------------------")
		fmt.Println("The hub is able to manage different devices like android, ios, ...")
		fmt.Println("you can enable / disable managers dependent on your needs.")
		fmt.Println("")
		input = validateInput(reader, "Enable Android Device Manager? (y/n)", []string{"y", "n"})
		if input == "y" {
			manager := config.Manager{
				Enabled: true,
			}
			fmt.Println("")
			fmt.Println("There are two different ways to create screenshots in case of test failures")
			fmt.Println("Native Screenshots are generated by OS and can capture OS Dialogs as well but be careful because it can expose sensitive parts-")
			fmt.Println("Simulated Screenshots are generated in app and can't capture external dialogs which makes it more difficult to see whats broken.")
			fmt.Println("")
			input = validateInput(reader, "Capture Native Screenshots? (y/n)", []string{"y", "n"})
			manager.UseOSScreenshot = input == "y"
			cfg.DeviceManager["android_device"] = manager
		}

		fmt.Println("")
		input = validateInput(reader, "Enable iOS Device Manager (real devices)? (y/n)", []string{"y", "n"})
		if input == "y" {
			manager := config.Manager{
				Enabled: true,
			}
			fmt.Println("There are two different ways to create screenshots in case of test failures")
			fmt.Println("Native Screenshots are generated by OS and can capture OS Dialogs as well but be careful because it can expose sensitive parts-")
			fmt.Println("Simulated Screenshots are generated in app and can't capture external dialogs which makes it more difficult to see whats broken.")
			input = validateInput(reader, "Capture Native Screenshots? (y/n)", []string{"y", "n"})
			manager.UseOSScreenshot = input == "y"
			cfg.DeviceManager["ios_device"] = manager
		}

		fmt.Println("")
		input = validateInput(reader, "Enable iOS Simulator Manager? (y/n)", []string{"y", "n"})
		if input == "y" {
			manager := config.Manager{
				Enabled: true,
			}
			fmt.Println("")
			fmt.Println("There are two different ways to create screenshots in case of test failures")
			fmt.Println("Native Screenshots are generated by OS and can capture OS Dialogs as well but be careful because it can expose sensitive parts-")
			fmt.Println("Simulated Screenshots are generated in app and can't capture external dialogs which makes it more difficult to see whats broken.")
			fmt.Println("")
			input = validateInput(reader, "Capture Native Screenshots? (y/n)", []string{"y", "n"})
			manager.UseOSScreenshot = input == "y"
			cfg.DeviceManager["ios_sim"] = manager
		}

		fmt.Println("")
		fmt.Println("Unity Editor can be managed as well which can be used to execute PlayMode in a 'swarm' mode and create similar reports like on device.")
		fmt.Println("")
		input = validateInput(reader, "Enable Unity Editor Manager? (y/n)", []string{"y", "n"})
		if input == "y" {
			manager := config.Manager{
				Enabled: true,
			}
			manager.UseOSScreenshot = false
			cfg.DeviceManager["unity_editor"] = manager
		}

		y, err := yaml.Marshal(&cfg)
		if err != nil {
			return err
		}

		fmt.Println("------------------------------------")
		fmt.Println("Save your config!")
		fmt.Println("")
		input = readLine(reader, "Enter a for the config: (default: config.yaml)")
		if input == "" {
			input = "config.yaml"
		}

		if err := os.WriteFile(input, y, os.ModePerm); err != nil {
			return err
		}

		fmt.Println("")
		fmt.Println("Setup finished!")
		d, _ := os.Getwd()
		fmt.Println("your config was written to" + filepath.Join(d, input))
		fmt.Println("")
		fmt.Println(fmt.Sprintf("you can start the hub now via 'automationhub master --config %s'", filepath.Join(d, input)))
		return nil
	},
}

func validateInput(reader *bufio.Reader, info string, validInputs []string) string {
	for {
		data := readLine(reader, info)
		for _, v := range validInputs {
			if v == data {
				return data
			}
		}
	}
}

func readValidIP(reader *bufio.Reader, info string) string {
	for {
		data := readLine(reader, info)
		ip := net.ParseIP(data)
		if ip != nil {
			return data
		}
	}
}

func readLine(reader *bufio.Reader, infos string) string {
	fmt.Printf("%s -> ", infos)
	test, _ := reader.ReadString('\n')
	return strings.TrimSpace(test)
}

func init() {
	rootCmd.AddCommand(configureCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// configureCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// configureCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
