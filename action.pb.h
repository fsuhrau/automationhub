// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_action_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_action_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_action_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_action_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_action_2eproto;
namespace action {
class GetAttr;
class GetAttrDefaultTypeInternal;
extern GetAttrDefaultTypeInternal _GetAttr_default_instance_;
class MoveElement;
class MoveElementDefaultTypeInternal;
extern MoveElementDefaultTypeInternal _MoveElement_default_instance_;
class MoveOffset;
class MoveOffsetDefaultTypeInternal;
extern MoveOffsetDefaultTypeInternal _MoveOffset_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Screenshot;
class ScreenshotDefaultTypeInternal;
extern ScreenshotDefaultTypeInternal _Screenshot_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SetAttr;
class SetAttrDefaultTypeInternal;
extern SetAttrDefaultTypeInternal _SetAttr_default_instance_;
class Touch;
class TouchDefaultTypeInternal;
extern TouchDefaultTypeInternal _Touch_default_instance_;
}  // namespace action
PROTOBUF_NAMESPACE_OPEN
template<> ::action::GetAttr* Arena::CreateMaybeMessage<::action::GetAttr>(Arena*);
template<> ::action::MoveElement* Arena::CreateMaybeMessage<::action::MoveElement>(Arena*);
template<> ::action::MoveOffset* Arena::CreateMaybeMessage<::action::MoveOffset>(Arena*);
template<> ::action::Request* Arena::CreateMaybeMessage<::action::Request>(Arena*);
template<> ::action::Response* Arena::CreateMaybeMessage<::action::Response>(Arena*);
template<> ::action::Screenshot* Arena::CreateMaybeMessage<::action::Screenshot>(Arena*);
template<> ::action::Session* Arena::CreateMaybeMessage<::action::Session>(Arena*);
template<> ::action::SetAttr* Arena::CreateMaybeMessage<::action::SetAttr>(Arena*);
template<> ::action::Touch* Arena::CreateMaybeMessage<::action::Touch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace action {

enum ActionType : int {
  Custom = 0,
  GetSceneGraph = 1,
  ElementIsDisplayed = 2,
  ElementSetValue = 3,
  ElementGetValue = 4,
  Move = 5,
  TouchDown = 6,
  TouchMove = 7,
  TouchUp = 8,
  DragAndDrop = 9,
  LongTouch = 10,
  ElementTouch = 11,
  GetScreenshot = 12,
  ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActionType_IsValid(int value);
constexpr ActionType ActionType_MIN = Custom;
constexpr ActionType ActionType_MAX = GetScreenshot;
constexpr int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor();
template<typename T>
inline const std::string& ActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionType_descriptor(), enum_t_value);
}
inline bool ActionType_Parse(
    const std::string& name, ActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
// ===================================================================

class SetAttr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:action.SetAttr) */ {
 public:
  SetAttr();
  virtual ~SetAttr();

  SetAttr(const SetAttr& from);
  SetAttr(SetAttr&& from) noexcept
    : SetAttr() {
    *this = ::std::move(from);
  }

  inline SetAttr& operator=(const SetAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttr& operator=(SetAttr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAttr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAttr* internal_default_instance() {
    return reinterpret_cast<const SetAttr*>(
               &_SetAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetAttr& a, SetAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAttr* New() const final {
    return CreateMaybeMessage<SetAttr>(nullptr);
  }

  SetAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAttr& from);
  void MergeFrom(const SetAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "action.SetAttr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAttrFieldNumber = 2,
    kValFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string attr = 2;
  void clear_attr();
  const std::string& attr() const;
  void set_attr(const std::string& value);
  void set_attr(std::string&& value);
  void set_attr(const char* value);
  void set_attr(const char* value, size_t size);
  std::string* mutable_attr();
  std::string* release_attr();
  void set_allocated_attr(std::string* attr);
  private:
  const std::string& _internal_attr() const;
  void _internal_set_attr(const std::string& value);
  std::string* _internal_mutable_attr();
  public:

  // string val = 3;
  void clear_val();
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // @@protoc_insertion_point(class_scope:action.SetAttr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2eproto;
};
// -------------------------------------------------------------------

class GetAttr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:action.GetAttr) */ {
 public:
  GetAttr();
  virtual ~GetAttr();

  GetAttr(const GetAttr& from);
  GetAttr(GetAttr&& from) noexcept
    : GetAttr() {
    *this = ::std::move(from);
  }

  inline GetAttr& operator=(const GetAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAttr& operator=(GetAttr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAttr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAttr* internal_default_instance() {
    return reinterpret_cast<const GetAttr*>(
               &_GetAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAttr& a, GetAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAttr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAttr* New() const final {
    return CreateMaybeMessage<GetAttr>(nullptr);
  }

  GetAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAttr& from);
  void MergeFrom(const GetAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "action.GetAttr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAttrFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string attr = 2;
  void clear_attr();
  const std::string& attr() const;
  void set_attr(const std::string& value);
  void set_attr(std::string&& value);
  void set_attr(const char* value);
  void set_attr(const char* value, size_t size);
  std::string* mutable_attr();
  std::string* release_attr();
  void set_allocated_attr(std::string* attr);
  private:
  const std::string& _internal_attr() const;
  void _internal_set_attr(const std::string& value);
  std::string* _internal_mutable_attr();
  public:

  // @@protoc_insertion_point(class_scope:action.GetAttr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2eproto;
};
// -------------------------------------------------------------------

class MoveOffset :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:action.MoveOffset) */ {
 public:
  MoveOffset();
  virtual ~MoveOffset();

  MoveOffset(const MoveOffset& from);
  MoveOffset(MoveOffset&& from) noexcept
    : MoveOffset() {
    *this = ::std::move(from);
  }

  inline MoveOffset& operator=(const MoveOffset& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveOffset& operator=(MoveOffset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveOffset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveOffset* internal_default_instance() {
    return reinterpret_cast<const MoveOffset*>(
               &_MoveOffset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MoveOffset& a, MoveOffset& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveOffset* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveOffset* New() const final {
    return CreateMaybeMessage<MoveOffset>(nullptr);
  }

  MoveOffset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveOffset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveOffset& from);
  void MergeFrom(const MoveOffset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveOffset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "action.MoveOffset";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // int64 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int64 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:action.MoveOffset)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 from_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2eproto;
};
// -------------------------------------------------------------------

class MoveElement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:action.MoveElement) */ {
 public:
  MoveElement();
  virtual ~MoveElement();

  MoveElement(const MoveElement& from);
  MoveElement(MoveElement&& from) noexcept
    : MoveElement() {
    *this = ::std::move(from);
  }

  inline MoveElement& operator=(const MoveElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveElement& operator=(MoveElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveElement* internal_default_instance() {
    return reinterpret_cast<const MoveElement*>(
               &_MoveElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MoveElement& a, MoveElement& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveElement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveElement* New() const final {
    return CreateMaybeMessage<MoveElement>(nullptr);
  }

  MoveElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveElement& from);
  void MergeFrom(const MoveElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "action.MoveElement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // string from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // @@protoc_insertion_point(class_scope:action.MoveElement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2eproto;
};
// -------------------------------------------------------------------

class Touch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:action.Touch) */ {
 public:
  Touch();
  virtual ~Touch();

  Touch(const Touch& from);
  Touch(Touch&& from) noexcept
    : Touch() {
    *this = ::std::move(from);
  }

  inline Touch& operator=(const Touch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Touch& operator=(Touch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Touch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Touch* internal_default_instance() {
    return reinterpret_cast<const Touch*>(
               &_Touch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Touch& a, Touch& b) {
    a.Swap(&b);
  }
  inline void Swap(Touch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Touch* New() const final {
    return CreateMaybeMessage<Touch>(nullptr);
  }

  Touch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Touch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Touch& from);
  void MergeFrom(const Touch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Touch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "action.Touch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXoffsetFieldNumber = 2,
    kYoffsetFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int64 xoffset = 2;
  void clear_xoffset();
  ::PROTOBUF_NAMESPACE_ID::int64 xoffset() const;
  void set_xoffset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_xoffset() const;
  void _internal_set_xoffset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 yoffset = 3;
  void clear_yoffset();
  ::PROTOBUF_NAMESPACE_ID::int64 yoffset() const;
  void set_yoffset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_yoffset() const;
  void _internal_set_yoffset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:action.Touch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int64 xoffset_;
  ::PROTOBUF_NAMESPACE_ID::int64 yoffset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2eproto;
};
// -------------------------------------------------------------------

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:action.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum PayloadCase {
    kId = 2,
    kData = 3,
    kSetAttr = 4,
    kGetAttr = 5,
    kMoveOffset = 6,
    kTouch = 7,
    kMoveElement = 8,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "action.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionTypeFieldNumber = 1,
    kIdFieldNumber = 2,
    kDataFieldNumber = 3,
    kSetAttrFieldNumber = 4,
    kGetAttrFieldNumber = 5,
    kMoveOffsetFieldNumber = 6,
    kTouchFieldNumber = 7,
    kMoveElementFieldNumber = 8,
  };
  // .action.ActionType actionType = 1;
  void clear_actiontype();
  ::action::ActionType actiontype() const;
  void set_actiontype(::action::ActionType value);
  private:
  ::action::ActionType _internal_actiontype() const;
  void _internal_set_actiontype(::action::ActionType value);
  public:

  // string id = 2;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string data = 3;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .action.SetAttr setAttr = 4;
  bool has_setattr() const;
  private:
  bool _internal_has_setattr() const;
  public:
  void clear_setattr();
  const ::action::SetAttr& setattr() const;
  ::action::SetAttr* release_setattr();
  ::action::SetAttr* mutable_setattr();
  void set_allocated_setattr(::action::SetAttr* setattr);
  private:
  const ::action::SetAttr& _internal_setattr() const;
  ::action::SetAttr* _internal_mutable_setattr();
  public:

  // .action.GetAttr getAttr = 5;
  bool has_getattr() const;
  private:
  bool _internal_has_getattr() const;
  public:
  void clear_getattr();
  const ::action::GetAttr& getattr() const;
  ::action::GetAttr* release_getattr();
  ::action::GetAttr* mutable_getattr();
  void set_allocated_getattr(::action::GetAttr* getattr);
  private:
  const ::action::GetAttr& _internal_getattr() const;
  ::action::GetAttr* _internal_mutable_getattr();
  public:

  // .action.MoveOffset moveOffset = 6;
  bool has_moveoffset() const;
  private:
  bool _internal_has_moveoffset() const;
  public:
  void clear_moveoffset();
  const ::action::MoveOffset& moveoffset() const;
  ::action::MoveOffset* release_moveoffset();
  ::action::MoveOffset* mutable_moveoffset();
  void set_allocated_moveoffset(::action::MoveOffset* moveoffset);
  private:
  const ::action::MoveOffset& _internal_moveoffset() const;
  ::action::MoveOffset* _internal_mutable_moveoffset();
  public:

  // .action.Touch touch = 7;
  bool has_touch() const;
  private:
  bool _internal_has_touch() const;
  public:
  void clear_touch();
  const ::action::Touch& touch() const;
  ::action::Touch* release_touch();
  ::action::Touch* mutable_touch();
  void set_allocated_touch(::action::Touch* touch);
  private:
  const ::action::Touch& _internal_touch() const;
  ::action::Touch* _internal_mutable_touch();
  public:

  // .action.MoveElement moveElement = 8;
  bool has_moveelement() const;
  private:
  bool _internal_has_moveelement() const;
  public:
  void clear_moveelement();
  const ::action::MoveElement& moveelement() const;
  ::action::MoveElement* release_moveelement();
  ::action::MoveElement* mutable_moveelement();
  void set_allocated_moveelement(::action::MoveElement* moveelement);
  private:
  const ::action::MoveElement& _internal_moveelement() const;
  ::action::MoveElement* _internal_mutable_moveelement();
  public:

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:action.Request)
 private:
  class _Internal;
  void set_has_id();
  void set_has_data();
  void set_has_setattr();
  void set_has_getattr();
  void set_has_moveoffset();
  void set_has_touch();
  void set_has_moveelement();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int actiontype_;
  union PayloadUnion {
    PayloadUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::action::SetAttr* setattr_;
    ::action::GetAttr* getattr_;
    ::action::MoveOffset* moveoffset_;
    ::action::Touch* touch_;
    ::action::MoveElement* moveelement_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_action_2eproto;
};
// -------------------------------------------------------------------

class Session :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:action.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(nullptr);
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "action.Session";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
    kSessionIDFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // string deviceID = 1;
  void clear_deviceid();
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string sessionID = 2;
  void clear_sessionid();
  const std::string& sessionid() const;
  void set_sessionid(const std::string& value);
  void set_sessionid(std::string&& value);
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  std::string* mutable_sessionid();
  std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:action.Session)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2eproto;
};
// -------------------------------------------------------------------

class Screenshot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:action.Screenshot) */ {
 public:
  Screenshot();
  virtual ~Screenshot();

  Screenshot(const Screenshot& from);
  Screenshot(Screenshot&& from) noexcept
    : Screenshot() {
    *this = ::std::move(from);
  }

  inline Screenshot& operator=(const Screenshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Screenshot& operator=(Screenshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Screenshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Screenshot* internal_default_instance() {
    return reinterpret_cast<const Screenshot*>(
               &_Screenshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Screenshot& a, Screenshot& b) {
    a.Swap(&b);
  }
  inline void Swap(Screenshot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Screenshot* New() const final {
    return CreateMaybeMessage<Screenshot>(nullptr);
  }

  Screenshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Screenshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Screenshot& from);
  void MergeFrom(const Screenshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Screenshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "action.Screenshot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceengraphFieldNumber = 1,
    kScreenshotFieldNumber = 2,
  };
  // bytes sceengraph = 1;
  void clear_sceengraph();
  const std::string& sceengraph() const;
  void set_sceengraph(const std::string& value);
  void set_sceengraph(std::string&& value);
  void set_sceengraph(const char* value);
  void set_sceengraph(const void* value, size_t size);
  std::string* mutable_sceengraph();
  std::string* release_sceengraph();
  void set_allocated_sceengraph(std::string* sceengraph);
  private:
  const std::string& _internal_sceengraph() const;
  void _internal_set_sceengraph(const std::string& value);
  std::string* _internal_mutable_sceengraph();
  public:

  // bytes screenshot = 2;
  void clear_screenshot();
  const std::string& screenshot() const;
  void set_screenshot(const std::string& value);
  void set_screenshot(std::string&& value);
  void set_screenshot(const char* value);
  void set_screenshot(const void* value, size_t size);
  std::string* mutable_screenshot();
  std::string* release_screenshot();
  void set_allocated_screenshot(std::string* screenshot);
  private:
  const std::string& _internal_screenshot() const;
  void _internal_set_screenshot(const std::string& value);
  std::string* _internal_mutable_screenshot();
  public:

  // @@protoc_insertion_point(class_scope:action.Screenshot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sceengraph_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr screenshot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:action.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  enum PayloadCase {
    kVisible = 3,
    kData = 4,
    kValue = 5,
    kScreenshot = 6,
    kSession = 7,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "action.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionTypeFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kVisibleFieldNumber = 3,
    kDataFieldNumber = 4,
    kValueFieldNumber = 5,
    kScreenshotFieldNumber = 6,
    kSessionFieldNumber = 7,
  };
  // .action.ActionType actionType = 1;
  void clear_actiontype();
  ::action::ActionType actiontype() const;
  void set_actiontype(::action::ActionType value);
  private:
  ::action::ActionType _internal_actiontype() const;
  void _internal_set_actiontype(::action::ActionType value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool visible = 3;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // bytes data = 4;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string value = 5;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .action.Screenshot screenshot = 6;
  bool has_screenshot() const;
  private:
  bool _internal_has_screenshot() const;
  public:
  void clear_screenshot();
  const ::action::Screenshot& screenshot() const;
  ::action::Screenshot* release_screenshot();
  ::action::Screenshot* mutable_screenshot();
  void set_allocated_screenshot(::action::Screenshot* screenshot);
  private:
  const ::action::Screenshot& _internal_screenshot() const;
  ::action::Screenshot* _internal_mutable_screenshot();
  public:

  // .action.Session session = 7;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::action::Session& session() const;
  ::action::Session* release_session();
  ::action::Session* mutable_session();
  void set_allocated_session(::action::Session* session);
  private:
  const ::action::Session& _internal_session() const;
  ::action::Session* _internal_mutable_session();
  public:

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:action.Response)
 private:
  class _Internal;
  void set_has_visible();
  void set_has_data();
  void set_has_value();
  void set_has_screenshot();
  void set_has_session();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int actiontype_;
  bool success_;
  union PayloadUnion {
    PayloadUnion() {}
    bool visible_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::action::Screenshot* screenshot_;
    ::action::Session* session_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_action_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetAttr

// string id = 1;
inline void SetAttr::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAttr::id() const {
  // @@protoc_insertion_point(field_get:action.SetAttr.id)
  return _internal_id();
}
inline void SetAttr::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:action.SetAttr.id)
}
inline std::string* SetAttr::mutable_id() {
  // @@protoc_insertion_point(field_mutable:action.SetAttr.id)
  return _internal_mutable_id();
}
inline const std::string& SetAttr::_internal_id() const {
  return id_.GetNoArena();
}
inline void SetAttr::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetAttr::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.SetAttr.id)
}
inline void SetAttr::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.SetAttr.id)
}
inline void SetAttr::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.SetAttr.id)
}
inline std::string* SetAttr::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAttr::release_id() {
  // @@protoc_insertion_point(field_release:action.SetAttr.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAttr::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:action.SetAttr.id)
}

// string attr = 2;
inline void SetAttr::clear_attr() {
  attr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAttr::attr() const {
  // @@protoc_insertion_point(field_get:action.SetAttr.attr)
  return _internal_attr();
}
inline void SetAttr::set_attr(const std::string& value) {
  _internal_set_attr(value);
  // @@protoc_insertion_point(field_set:action.SetAttr.attr)
}
inline std::string* SetAttr::mutable_attr() {
  // @@protoc_insertion_point(field_mutable:action.SetAttr.attr)
  return _internal_mutable_attr();
}
inline const std::string& SetAttr::_internal_attr() const {
  return attr_.GetNoArena();
}
inline void SetAttr::_internal_set_attr(const std::string& value) {
  
  attr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetAttr::set_attr(std::string&& value) {
  
  attr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.SetAttr.attr)
}
inline void SetAttr::set_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.SetAttr.attr)
}
inline void SetAttr::set_attr(const char* value, size_t size) {
  
  attr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.SetAttr.attr)
}
inline std::string* SetAttr::_internal_mutable_attr() {
  
  return attr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAttr::release_attr() {
  // @@protoc_insertion_point(field_release:action.SetAttr.attr)
  
  return attr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAttr::set_allocated_attr(std::string* attr) {
  if (attr != nullptr) {
    
  } else {
    
  }
  attr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attr);
  // @@protoc_insertion_point(field_set_allocated:action.SetAttr.attr)
}

// string val = 3;
inline void SetAttr::clear_val() {
  val_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAttr::val() const {
  // @@protoc_insertion_point(field_get:action.SetAttr.val)
  return _internal_val();
}
inline void SetAttr::set_val(const std::string& value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:action.SetAttr.val)
}
inline std::string* SetAttr::mutable_val() {
  // @@protoc_insertion_point(field_mutable:action.SetAttr.val)
  return _internal_mutable_val();
}
inline const std::string& SetAttr::_internal_val() const {
  return val_.GetNoArena();
}
inline void SetAttr::_internal_set_val(const std::string& value) {
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetAttr::set_val(std::string&& value) {
  
  val_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.SetAttr.val)
}
inline void SetAttr::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.SetAttr.val)
}
inline void SetAttr::set_val(const char* value, size_t size) {
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.SetAttr.val)
}
inline std::string* SetAttr::_internal_mutable_val() {
  
  return val_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAttr::release_val() {
  // @@protoc_insertion_point(field_release:action.SetAttr.val)
  
  return val_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAttr::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:action.SetAttr.val)
}

// -------------------------------------------------------------------

// GetAttr

// string id = 1;
inline void GetAttr::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAttr::id() const {
  // @@protoc_insertion_point(field_get:action.GetAttr.id)
  return _internal_id();
}
inline void GetAttr::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:action.GetAttr.id)
}
inline std::string* GetAttr::mutable_id() {
  // @@protoc_insertion_point(field_mutable:action.GetAttr.id)
  return _internal_mutable_id();
}
inline const std::string& GetAttr::_internal_id() const {
  return id_.GetNoArena();
}
inline void GetAttr::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAttr::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.GetAttr.id)
}
inline void GetAttr::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.GetAttr.id)
}
inline void GetAttr::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.GetAttr.id)
}
inline std::string* GetAttr::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAttr::release_id() {
  // @@protoc_insertion_point(field_release:action.GetAttr.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAttr::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:action.GetAttr.id)
}

// string attr = 2;
inline void GetAttr::clear_attr() {
  attr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAttr::attr() const {
  // @@protoc_insertion_point(field_get:action.GetAttr.attr)
  return _internal_attr();
}
inline void GetAttr::set_attr(const std::string& value) {
  _internal_set_attr(value);
  // @@protoc_insertion_point(field_set:action.GetAttr.attr)
}
inline std::string* GetAttr::mutable_attr() {
  // @@protoc_insertion_point(field_mutable:action.GetAttr.attr)
  return _internal_mutable_attr();
}
inline const std::string& GetAttr::_internal_attr() const {
  return attr_.GetNoArena();
}
inline void GetAttr::_internal_set_attr(const std::string& value) {
  
  attr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAttr::set_attr(std::string&& value) {
  
  attr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.GetAttr.attr)
}
inline void GetAttr::set_attr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.GetAttr.attr)
}
inline void GetAttr::set_attr(const char* value, size_t size) {
  
  attr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.GetAttr.attr)
}
inline std::string* GetAttr::_internal_mutable_attr() {
  
  return attr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAttr::release_attr() {
  // @@protoc_insertion_point(field_release:action.GetAttr.attr)
  
  return attr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAttr::set_allocated_attr(std::string* attr) {
  if (attr != nullptr) {
    
  } else {
    
  }
  attr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attr);
  // @@protoc_insertion_point(field_set_allocated:action.GetAttr.attr)
}

// -------------------------------------------------------------------

// MoveOffset

// int64 from = 1;
inline void MoveOffset::clear_from() {
  from_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MoveOffset::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MoveOffset::from() const {
  // @@protoc_insertion_point(field_get:action.MoveOffset.from)
  return _internal_from();
}
inline void MoveOffset::_internal_set_from(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  from_ = value;
}
inline void MoveOffset::set_from(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:action.MoveOffset.from)
}

// int64 to = 2;
inline void MoveOffset::clear_to() {
  to_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MoveOffset::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MoveOffset::to() const {
  // @@protoc_insertion_point(field_get:action.MoveOffset.to)
  return _internal_to();
}
inline void MoveOffset::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_ = value;
}
inline void MoveOffset::set_to(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:action.MoveOffset.to)
}

// -------------------------------------------------------------------

// MoveElement

// string from = 1;
inline void MoveElement::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveElement::from() const {
  // @@protoc_insertion_point(field_get:action.MoveElement.from)
  return _internal_from();
}
inline void MoveElement::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:action.MoveElement.from)
}
inline std::string* MoveElement::mutable_from() {
  // @@protoc_insertion_point(field_mutable:action.MoveElement.from)
  return _internal_mutable_from();
}
inline const std::string& MoveElement::_internal_from() const {
  return from_.GetNoArena();
}
inline void MoveElement::_internal_set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MoveElement::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.MoveElement.from)
}
inline void MoveElement::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.MoveElement.from)
}
inline void MoveElement::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.MoveElement.from)
}
inline std::string* MoveElement::_internal_mutable_from() {
  
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveElement::release_from() {
  // @@protoc_insertion_point(field_release:action.MoveElement.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveElement::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:action.MoveElement.from)
}

// string to = 2;
inline void MoveElement::clear_to() {
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveElement::to() const {
  // @@protoc_insertion_point(field_get:action.MoveElement.to)
  return _internal_to();
}
inline void MoveElement::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:action.MoveElement.to)
}
inline std::string* MoveElement::mutable_to() {
  // @@protoc_insertion_point(field_mutable:action.MoveElement.to)
  return _internal_mutable_to();
}
inline const std::string& MoveElement::_internal_to() const {
  return to_.GetNoArena();
}
inline void MoveElement::_internal_set_to(const std::string& value) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MoveElement::set_to(std::string&& value) {
  
  to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.MoveElement.to)
}
inline void MoveElement::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.MoveElement.to)
}
inline void MoveElement::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.MoveElement.to)
}
inline std::string* MoveElement::_internal_mutable_to() {
  
  return to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveElement::release_to() {
  // @@protoc_insertion_point(field_release:action.MoveElement.to)
  
  return to_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveElement::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:action.MoveElement.to)
}

// -------------------------------------------------------------------

// Touch

// string id = 1;
inline void Touch::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Touch::id() const {
  // @@protoc_insertion_point(field_get:action.Touch.id)
  return _internal_id();
}
inline void Touch::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:action.Touch.id)
}
inline std::string* Touch::mutable_id() {
  // @@protoc_insertion_point(field_mutable:action.Touch.id)
  return _internal_mutable_id();
}
inline const std::string& Touch::_internal_id() const {
  return id_.GetNoArena();
}
inline void Touch::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Touch::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.Touch.id)
}
inline void Touch::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.Touch.id)
}
inline void Touch::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.Touch.id)
}
inline std::string* Touch::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Touch::release_id() {
  // @@protoc_insertion_point(field_release:action.Touch.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Touch::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:action.Touch.id)
}

// int64 xoffset = 2;
inline void Touch::clear_xoffset() {
  xoffset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Touch::_internal_xoffset() const {
  return xoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Touch::xoffset() const {
  // @@protoc_insertion_point(field_get:action.Touch.xoffset)
  return _internal_xoffset();
}
inline void Touch::_internal_set_xoffset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  xoffset_ = value;
}
inline void Touch::set_xoffset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_xoffset(value);
  // @@protoc_insertion_point(field_set:action.Touch.xoffset)
}

// int64 yoffset = 3;
inline void Touch::clear_yoffset() {
  yoffset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Touch::_internal_yoffset() const {
  return yoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Touch::yoffset() const {
  // @@protoc_insertion_point(field_get:action.Touch.yoffset)
  return _internal_yoffset();
}
inline void Touch::_internal_set_yoffset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  yoffset_ = value;
}
inline void Touch::set_yoffset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_yoffset(value);
  // @@protoc_insertion_point(field_set:action.Touch.yoffset)
}

// -------------------------------------------------------------------

// Request

// .action.ActionType actionType = 1;
inline void Request::clear_actiontype() {
  actiontype_ = 0;
}
inline ::action::ActionType Request::_internal_actiontype() const {
  return static_cast< ::action::ActionType >(actiontype_);
}
inline ::action::ActionType Request::actiontype() const {
  // @@protoc_insertion_point(field_get:action.Request.actionType)
  return _internal_actiontype();
}
inline void Request::_internal_set_actiontype(::action::ActionType value) {
  
  actiontype_ = value;
}
inline void Request::set_actiontype(::action::ActionType value) {
  _internal_set_actiontype(value);
  // @@protoc_insertion_point(field_set:action.Request.actionType)
}

// string id = 2;
inline bool Request::_internal_has_id() const {
  return payload_case() == kId;
}
inline void Request::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void Request::clear_id() {
  if (_internal_has_id()) {
    payload_.id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
inline const std::string& Request::id() const {
  // @@protoc_insertion_point(field_get:action.Request.id)
  return _internal_id();
}
inline void Request::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:action.Request.id)
}
inline std::string* Request::mutable_id() {
  // @@protoc_insertion_point(field_mutable:action.Request.id)
  return _internal_mutable_id();
}
inline const std::string& Request::_internal_id() const {
  if (_internal_has_id()) {
    return payload_.id_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Request::_internal_set_id(const std::string& value) {
  if (!_internal_has_id()) {
    clear_payload();
    set_has_id();
    payload_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request::set_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:action.Request.id)
  if (!_internal_has_id()) {
    clear_payload();
    set_has_id();
    payload_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.Request.id)
}
inline void Request::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_id()) {
    clear_payload();
    set_has_id();
    payload_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.Request.id)
}
inline void Request::set_id(const char* value, size_t size) {
  if (!_internal_has_id()) {
    clear_payload();
    set_has_id();
    payload_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.Request.id)
}
inline std::string* Request::_internal_mutable_id() {
  if (!_internal_has_id()) {
    clear_payload();
    set_has_id();
    payload_.id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_id() {
  // @@protoc_insertion_point(field_release:action.Request.id)
  if (_internal_has_id()) {
    clear_has_payload();
    return payload_.id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Request::set_allocated_id(std::string* id) {
  if (has_payload()) {
    clear_payload();
  }
  if (id != nullptr) {
    set_has_id();
    payload_.id_.UnsafeSetDefault(id);
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.id)
}

// string data = 3;
inline bool Request::_internal_has_data() const {
  return payload_case() == kData;
}
inline void Request::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void Request::clear_data() {
  if (_internal_has_data()) {
    payload_.data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
inline const std::string& Request::data() const {
  // @@protoc_insertion_point(field_get:action.Request.data)
  return _internal_data();
}
inline void Request::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:action.Request.data)
}
inline std::string* Request::mutable_data() {
  // @@protoc_insertion_point(field_mutable:action.Request.data)
  return _internal_mutable_data();
}
inline const std::string& Request::_internal_data() const {
  if (_internal_has_data()) {
    return payload_.data_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Request::_internal_set_data(const std::string& value) {
  if (!_internal_has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request::set_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:action.Request.data)
  if (!_internal_has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.Request.data)
}
inline void Request::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.Request.data)
}
inline void Request::set_data(const char* value, size_t size) {
  if (!_internal_has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.Request.data)
}
inline std::string* Request::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_data() {
  // @@protoc_insertion_point(field_release:action.Request.data)
  if (_internal_has_data()) {
    clear_has_payload();
    return payload_.data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Request::set_allocated_data(std::string* data) {
  if (has_payload()) {
    clear_payload();
  }
  if (data != nullptr) {
    set_has_data();
    payload_.data_.UnsafeSetDefault(data);
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.data)
}

// .action.SetAttr setAttr = 4;
inline bool Request::_internal_has_setattr() const {
  return payload_case() == kSetAttr;
}
inline bool Request::has_setattr() const {
  return _internal_has_setattr();
}
inline void Request::set_has_setattr() {
  _oneof_case_[0] = kSetAttr;
}
inline void Request::clear_setattr() {
  if (_internal_has_setattr()) {
    delete payload_.setattr_;
    clear_has_payload();
  }
}
inline ::action::SetAttr* Request::release_setattr() {
  // @@protoc_insertion_point(field_release:action.Request.setAttr)
  if (has_setattr()) {
    clear_has_payload();
      ::action::SetAttr* temp = payload_.setattr_;
    payload_.setattr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::action::SetAttr& Request::_internal_setattr() const {
  return _internal_has_setattr()
      ? *payload_.setattr_
      : *reinterpret_cast< ::action::SetAttr*>(&::action::_SetAttr_default_instance_);
}
inline const ::action::SetAttr& Request::setattr() const {
  // @@protoc_insertion_point(field_get:action.Request.setAttr)
  return _internal_setattr();
}
inline ::action::SetAttr* Request::_internal_mutable_setattr() {
  if (!_internal_has_setattr()) {
    clear_payload();
    set_has_setattr();
    payload_.setattr_ = CreateMaybeMessage< ::action::SetAttr >(
        GetArenaNoVirtual());
  }
  return payload_.setattr_;
}
inline ::action::SetAttr* Request::mutable_setattr() {
  // @@protoc_insertion_point(field_mutable:action.Request.setAttr)
  return _internal_mutable_setattr();
}

// .action.GetAttr getAttr = 5;
inline bool Request::_internal_has_getattr() const {
  return payload_case() == kGetAttr;
}
inline bool Request::has_getattr() const {
  return _internal_has_getattr();
}
inline void Request::set_has_getattr() {
  _oneof_case_[0] = kGetAttr;
}
inline void Request::clear_getattr() {
  if (_internal_has_getattr()) {
    delete payload_.getattr_;
    clear_has_payload();
  }
}
inline ::action::GetAttr* Request::release_getattr() {
  // @@protoc_insertion_point(field_release:action.Request.getAttr)
  if (has_getattr()) {
    clear_has_payload();
      ::action::GetAttr* temp = payload_.getattr_;
    payload_.getattr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::action::GetAttr& Request::_internal_getattr() const {
  return _internal_has_getattr()
      ? *payload_.getattr_
      : *reinterpret_cast< ::action::GetAttr*>(&::action::_GetAttr_default_instance_);
}
inline const ::action::GetAttr& Request::getattr() const {
  // @@protoc_insertion_point(field_get:action.Request.getAttr)
  return _internal_getattr();
}
inline ::action::GetAttr* Request::_internal_mutable_getattr() {
  if (!_internal_has_getattr()) {
    clear_payload();
    set_has_getattr();
    payload_.getattr_ = CreateMaybeMessage< ::action::GetAttr >(
        GetArenaNoVirtual());
  }
  return payload_.getattr_;
}
inline ::action::GetAttr* Request::mutable_getattr() {
  // @@protoc_insertion_point(field_mutable:action.Request.getAttr)
  return _internal_mutable_getattr();
}

// .action.MoveOffset moveOffset = 6;
inline bool Request::_internal_has_moveoffset() const {
  return payload_case() == kMoveOffset;
}
inline bool Request::has_moveoffset() const {
  return _internal_has_moveoffset();
}
inline void Request::set_has_moveoffset() {
  _oneof_case_[0] = kMoveOffset;
}
inline void Request::clear_moveoffset() {
  if (_internal_has_moveoffset()) {
    delete payload_.moveoffset_;
    clear_has_payload();
  }
}
inline ::action::MoveOffset* Request::release_moveoffset() {
  // @@protoc_insertion_point(field_release:action.Request.moveOffset)
  if (has_moveoffset()) {
    clear_has_payload();
      ::action::MoveOffset* temp = payload_.moveoffset_;
    payload_.moveoffset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::action::MoveOffset& Request::_internal_moveoffset() const {
  return _internal_has_moveoffset()
      ? *payload_.moveoffset_
      : *reinterpret_cast< ::action::MoveOffset*>(&::action::_MoveOffset_default_instance_);
}
inline const ::action::MoveOffset& Request::moveoffset() const {
  // @@protoc_insertion_point(field_get:action.Request.moveOffset)
  return _internal_moveoffset();
}
inline ::action::MoveOffset* Request::_internal_mutable_moveoffset() {
  if (!_internal_has_moveoffset()) {
    clear_payload();
    set_has_moveoffset();
    payload_.moveoffset_ = CreateMaybeMessage< ::action::MoveOffset >(
        GetArenaNoVirtual());
  }
  return payload_.moveoffset_;
}
inline ::action::MoveOffset* Request::mutable_moveoffset() {
  // @@protoc_insertion_point(field_mutable:action.Request.moveOffset)
  return _internal_mutable_moveoffset();
}

// .action.Touch touch = 7;
inline bool Request::_internal_has_touch() const {
  return payload_case() == kTouch;
}
inline bool Request::has_touch() const {
  return _internal_has_touch();
}
inline void Request::set_has_touch() {
  _oneof_case_[0] = kTouch;
}
inline void Request::clear_touch() {
  if (_internal_has_touch()) {
    delete payload_.touch_;
    clear_has_payload();
  }
}
inline ::action::Touch* Request::release_touch() {
  // @@protoc_insertion_point(field_release:action.Request.touch)
  if (has_touch()) {
    clear_has_payload();
      ::action::Touch* temp = payload_.touch_;
    payload_.touch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::action::Touch& Request::_internal_touch() const {
  return _internal_has_touch()
      ? *payload_.touch_
      : *reinterpret_cast< ::action::Touch*>(&::action::_Touch_default_instance_);
}
inline const ::action::Touch& Request::touch() const {
  // @@protoc_insertion_point(field_get:action.Request.touch)
  return _internal_touch();
}
inline ::action::Touch* Request::_internal_mutable_touch() {
  if (!_internal_has_touch()) {
    clear_payload();
    set_has_touch();
    payload_.touch_ = CreateMaybeMessage< ::action::Touch >(
        GetArenaNoVirtual());
  }
  return payload_.touch_;
}
inline ::action::Touch* Request::mutable_touch() {
  // @@protoc_insertion_point(field_mutable:action.Request.touch)
  return _internal_mutable_touch();
}

// .action.MoveElement moveElement = 8;
inline bool Request::_internal_has_moveelement() const {
  return payload_case() == kMoveElement;
}
inline bool Request::has_moveelement() const {
  return _internal_has_moveelement();
}
inline void Request::set_has_moveelement() {
  _oneof_case_[0] = kMoveElement;
}
inline void Request::clear_moveelement() {
  if (_internal_has_moveelement()) {
    delete payload_.moveelement_;
    clear_has_payload();
  }
}
inline ::action::MoveElement* Request::release_moveelement() {
  // @@protoc_insertion_point(field_release:action.Request.moveElement)
  if (has_moveelement()) {
    clear_has_payload();
      ::action::MoveElement* temp = payload_.moveelement_;
    payload_.moveelement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::action::MoveElement& Request::_internal_moveelement() const {
  return _internal_has_moveelement()
      ? *payload_.moveelement_
      : *reinterpret_cast< ::action::MoveElement*>(&::action::_MoveElement_default_instance_);
}
inline const ::action::MoveElement& Request::moveelement() const {
  // @@protoc_insertion_point(field_get:action.Request.moveElement)
  return _internal_moveelement();
}
inline ::action::MoveElement* Request::_internal_mutable_moveelement() {
  if (!_internal_has_moveelement()) {
    clear_payload();
    set_has_moveelement();
    payload_.moveelement_ = CreateMaybeMessage< ::action::MoveElement >(
        GetArenaNoVirtual());
  }
  return payload_.moveelement_;
}
inline ::action::MoveElement* Request::mutable_moveelement() {
  // @@protoc_insertion_point(field_mutable:action.Request.moveElement)
  return _internal_mutable_moveelement();
}

inline bool Request::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Request::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Request::PayloadCase Request::payload_case() const {
  return Request::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Session

// string deviceID = 1;
inline void Session::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Session::deviceid() const {
  // @@protoc_insertion_point(field_get:action.Session.deviceID)
  return _internal_deviceid();
}
inline void Session::set_deviceid(const std::string& value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:action.Session.deviceID)
}
inline std::string* Session::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:action.Session.deviceID)
  return _internal_mutable_deviceid();
}
inline const std::string& Session::_internal_deviceid() const {
  return deviceid_.GetNoArena();
}
inline void Session::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Session::set_deviceid(std::string&& value) {
  
  deviceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.Session.deviceID)
}
inline void Session::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.Session.deviceID)
}
inline void Session::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.Session.deviceID)
}
inline std::string* Session::_internal_mutable_deviceid() {
  
  return deviceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Session::release_deviceid() {
  // @@protoc_insertion_point(field_release:action.Session.deviceID)
  
  return deviceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:action.Session.deviceID)
}

// string sessionID = 2;
inline void Session::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Session::sessionid() const {
  // @@protoc_insertion_point(field_get:action.Session.sessionID)
  return _internal_sessionid();
}
inline void Session::set_sessionid(const std::string& value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:action.Session.sessionID)
}
inline std::string* Session::mutable_sessionid() {
  // @@protoc_insertion_point(field_mutable:action.Session.sessionID)
  return _internal_mutable_sessionid();
}
inline const std::string& Session::_internal_sessionid() const {
  return sessionid_.GetNoArena();
}
inline void Session::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Session::set_sessionid(std::string&& value) {
  
  sessionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.Session.sessionID)
}
inline void Session::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.Session.sessionID)
}
inline void Session::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.Session.sessionID)
}
inline std::string* Session::_internal_mutable_sessionid() {
  
  return sessionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Session::release_sessionid() {
  // @@protoc_insertion_point(field_release:action.Session.sessionID)
  
  return sessionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:action.Session.sessionID)
}

// string version = 3;
inline void Session::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Session::version() const {
  // @@protoc_insertion_point(field_get:action.Session.version)
  return _internal_version();
}
inline void Session::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:action.Session.version)
}
inline std::string* Session::mutable_version() {
  // @@protoc_insertion_point(field_mutable:action.Session.version)
  return _internal_mutable_version();
}
inline const std::string& Session::_internal_version() const {
  return version_.GetNoArena();
}
inline void Session::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Session::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.Session.version)
}
inline void Session::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.Session.version)
}
inline void Session::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.Session.version)
}
inline std::string* Session::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Session::release_version() {
  // @@protoc_insertion_point(field_release:action.Session.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:action.Session.version)
}

// -------------------------------------------------------------------

// Screenshot

// bytes sceengraph = 1;
inline void Screenshot::clear_sceengraph() {
  sceengraph_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Screenshot::sceengraph() const {
  // @@protoc_insertion_point(field_get:action.Screenshot.sceengraph)
  return _internal_sceengraph();
}
inline void Screenshot::set_sceengraph(const std::string& value) {
  _internal_set_sceengraph(value);
  // @@protoc_insertion_point(field_set:action.Screenshot.sceengraph)
}
inline std::string* Screenshot::mutable_sceengraph() {
  // @@protoc_insertion_point(field_mutable:action.Screenshot.sceengraph)
  return _internal_mutable_sceengraph();
}
inline const std::string& Screenshot::_internal_sceengraph() const {
  return sceengraph_.GetNoArena();
}
inline void Screenshot::_internal_set_sceengraph(const std::string& value) {
  
  sceengraph_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Screenshot::set_sceengraph(std::string&& value) {
  
  sceengraph_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.Screenshot.sceengraph)
}
inline void Screenshot::set_sceengraph(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sceengraph_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.Screenshot.sceengraph)
}
inline void Screenshot::set_sceengraph(const void* value, size_t size) {
  
  sceengraph_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.Screenshot.sceengraph)
}
inline std::string* Screenshot::_internal_mutable_sceengraph() {
  
  return sceengraph_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Screenshot::release_sceengraph() {
  // @@protoc_insertion_point(field_release:action.Screenshot.sceengraph)
  
  return sceengraph_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Screenshot::set_allocated_sceengraph(std::string* sceengraph) {
  if (sceengraph != nullptr) {
    
  } else {
    
  }
  sceengraph_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sceengraph);
  // @@protoc_insertion_point(field_set_allocated:action.Screenshot.sceengraph)
}

// bytes screenshot = 2;
inline void Screenshot::clear_screenshot() {
  screenshot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Screenshot::screenshot() const {
  // @@protoc_insertion_point(field_get:action.Screenshot.screenshot)
  return _internal_screenshot();
}
inline void Screenshot::set_screenshot(const std::string& value) {
  _internal_set_screenshot(value);
  // @@protoc_insertion_point(field_set:action.Screenshot.screenshot)
}
inline std::string* Screenshot::mutable_screenshot() {
  // @@protoc_insertion_point(field_mutable:action.Screenshot.screenshot)
  return _internal_mutable_screenshot();
}
inline const std::string& Screenshot::_internal_screenshot() const {
  return screenshot_.GetNoArena();
}
inline void Screenshot::_internal_set_screenshot(const std::string& value) {
  
  screenshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Screenshot::set_screenshot(std::string&& value) {
  
  screenshot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.Screenshot.screenshot)
}
inline void Screenshot::set_screenshot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  screenshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.Screenshot.screenshot)
}
inline void Screenshot::set_screenshot(const void* value, size_t size) {
  
  screenshot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.Screenshot.screenshot)
}
inline std::string* Screenshot::_internal_mutable_screenshot() {
  
  return screenshot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Screenshot::release_screenshot() {
  // @@protoc_insertion_point(field_release:action.Screenshot.screenshot)
  
  return screenshot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Screenshot::set_allocated_screenshot(std::string* screenshot) {
  if (screenshot != nullptr) {
    
  } else {
    
  }
  screenshot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), screenshot);
  // @@protoc_insertion_point(field_set_allocated:action.Screenshot.screenshot)
}

// -------------------------------------------------------------------

// Response

// .action.ActionType actionType = 1;
inline void Response::clear_actiontype() {
  actiontype_ = 0;
}
inline ::action::ActionType Response::_internal_actiontype() const {
  return static_cast< ::action::ActionType >(actiontype_);
}
inline ::action::ActionType Response::actiontype() const {
  // @@protoc_insertion_point(field_get:action.Response.actionType)
  return _internal_actiontype();
}
inline void Response::_internal_set_actiontype(::action::ActionType value) {
  
  actiontype_ = value;
}
inline void Response::set_actiontype(::action::ActionType value) {
  _internal_set_actiontype(value);
  // @@protoc_insertion_point(field_set:action.Response.actionType)
}

// bool success = 2;
inline void Response::clear_success() {
  success_ = false;
}
inline bool Response::_internal_success() const {
  return success_;
}
inline bool Response::success() const {
  // @@protoc_insertion_point(field_get:action.Response.success)
  return _internal_success();
}
inline void Response::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:action.Response.success)
}

// bool visible = 3;
inline bool Response::_internal_has_visible() const {
  return payload_case() == kVisible;
}
inline void Response::set_has_visible() {
  _oneof_case_[0] = kVisible;
}
inline void Response::clear_visible() {
  if (_internal_has_visible()) {
    payload_.visible_ = false;
    clear_has_payload();
  }
}
inline bool Response::_internal_visible() const {
  if (_internal_has_visible()) {
    return payload_.visible_;
  }
  return false;
}
inline void Response::_internal_set_visible(bool value) {
  if (!_internal_has_visible()) {
    clear_payload();
    set_has_visible();
  }
  payload_.visible_ = value;
}
inline bool Response::visible() const {
  // @@protoc_insertion_point(field_get:action.Response.visible)
  return _internal_visible();
}
inline void Response::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:action.Response.visible)
}

// bytes data = 4;
inline bool Response::_internal_has_data() const {
  return payload_case() == kData;
}
inline void Response::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void Response::clear_data() {
  if (_internal_has_data()) {
    payload_.data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
inline const std::string& Response::data() const {
  // @@protoc_insertion_point(field_get:action.Response.data)
  return _internal_data();
}
inline void Response::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:action.Response.data)
}
inline std::string* Response::mutable_data() {
  // @@protoc_insertion_point(field_mutable:action.Response.data)
  return _internal_mutable_data();
}
inline const std::string& Response::_internal_data() const {
  if (_internal_has_data()) {
    return payload_.data_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Response::_internal_set_data(const std::string& value) {
  if (!_internal_has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Response::set_data(std::string&& value) {
  // @@protoc_insertion_point(field_set:action.Response.data)
  if (!_internal_has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.Response.data)
}
inline void Response::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.Response.data)
}
inline void Response::set_data(const void* value, size_t size) {
  if (!_internal_has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.Response.data)
}
inline std::string* Response::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_data() {
  // @@protoc_insertion_point(field_release:action.Response.data)
  if (_internal_has_data()) {
    clear_has_payload();
    return payload_.data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Response::set_allocated_data(std::string* data) {
  if (has_payload()) {
    clear_payload();
  }
  if (data != nullptr) {
    set_has_data();
    payload_.data_.UnsafeSetDefault(data);
  }
  // @@protoc_insertion_point(field_set_allocated:action.Response.data)
}

// string value = 5;
inline bool Response::_internal_has_value() const {
  return payload_case() == kValue;
}
inline void Response::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void Response::clear_value() {
  if (_internal_has_value()) {
    payload_.value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
inline const std::string& Response::value() const {
  // @@protoc_insertion_point(field_get:action.Response.value)
  return _internal_value();
}
inline void Response::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:action.Response.value)
}
inline std::string* Response::mutable_value() {
  // @@protoc_insertion_point(field_mutable:action.Response.value)
  return _internal_mutable_value();
}
inline const std::string& Response::_internal_value() const {
  if (_internal_has_value()) {
    return payload_.value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Response::_internal_set_value(const std::string& value) {
  if (!_internal_has_value()) {
    clear_payload();
    set_has_value();
    payload_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Response::set_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:action.Response.value)
  if (!_internal_has_value()) {
    clear_payload();
    set_has_value();
    payload_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:action.Response.value)
}
inline void Response::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_value()) {
    clear_payload();
    set_has_value();
    payload_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:action.Response.value)
}
inline void Response::set_value(const char* value, size_t size) {
  if (!_internal_has_value()) {
    clear_payload();
    set_has_value();
    payload_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:action.Response.value)
}
inline std::string* Response::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_payload();
    set_has_value();
    payload_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_value() {
  // @@protoc_insertion_point(field_release:action.Response.value)
  if (_internal_has_value()) {
    clear_has_payload();
    return payload_.value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Response::set_allocated_value(std::string* value) {
  if (has_payload()) {
    clear_payload();
  }
  if (value != nullptr) {
    set_has_value();
    payload_.value_.UnsafeSetDefault(value);
  }
  // @@protoc_insertion_point(field_set_allocated:action.Response.value)
}

// .action.Screenshot screenshot = 6;
inline bool Response::_internal_has_screenshot() const {
  return payload_case() == kScreenshot;
}
inline bool Response::has_screenshot() const {
  return _internal_has_screenshot();
}
inline void Response::set_has_screenshot() {
  _oneof_case_[0] = kScreenshot;
}
inline void Response::clear_screenshot() {
  if (_internal_has_screenshot()) {
    delete payload_.screenshot_;
    clear_has_payload();
  }
}
inline ::action::Screenshot* Response::release_screenshot() {
  // @@protoc_insertion_point(field_release:action.Response.screenshot)
  if (has_screenshot()) {
    clear_has_payload();
      ::action::Screenshot* temp = payload_.screenshot_;
    payload_.screenshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::action::Screenshot& Response::_internal_screenshot() const {
  return _internal_has_screenshot()
      ? *payload_.screenshot_
      : *reinterpret_cast< ::action::Screenshot*>(&::action::_Screenshot_default_instance_);
}
inline const ::action::Screenshot& Response::screenshot() const {
  // @@protoc_insertion_point(field_get:action.Response.screenshot)
  return _internal_screenshot();
}
inline ::action::Screenshot* Response::_internal_mutable_screenshot() {
  if (!_internal_has_screenshot()) {
    clear_payload();
    set_has_screenshot();
    payload_.screenshot_ = CreateMaybeMessage< ::action::Screenshot >(
        GetArenaNoVirtual());
  }
  return payload_.screenshot_;
}
inline ::action::Screenshot* Response::mutable_screenshot() {
  // @@protoc_insertion_point(field_mutable:action.Response.screenshot)
  return _internal_mutable_screenshot();
}

// .action.Session session = 7;
inline bool Response::_internal_has_session() const {
  return payload_case() == kSession;
}
inline bool Response::has_session() const {
  return _internal_has_session();
}
inline void Response::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void Response::clear_session() {
  if (_internal_has_session()) {
    delete payload_.session_;
    clear_has_payload();
  }
}
inline ::action::Session* Response::release_session() {
  // @@protoc_insertion_point(field_release:action.Response.session)
  if (has_session()) {
    clear_has_payload();
      ::action::Session* temp = payload_.session_;
    payload_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::action::Session& Response::_internal_session() const {
  return _internal_has_session()
      ? *payload_.session_
      : *reinterpret_cast< ::action::Session*>(&::action::_Session_default_instance_);
}
inline const ::action::Session& Response::session() const {
  // @@protoc_insertion_point(field_get:action.Response.session)
  return _internal_session();
}
inline ::action::Session* Response::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_payload();
    set_has_session();
    payload_.session_ = CreateMaybeMessage< ::action::Session >(
        GetArenaNoVirtual());
  }
  return payload_.session_;
}
inline ::action::Session* Response::mutable_session() {
  // @@protoc_insertion_point(field_mutable:action.Response.session)
  return _internal_mutable_session();
}

inline bool Response::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Response::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Response::PayloadCase Response::payload_case() const {
  return Response::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace action

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::action::ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::action::ActionType>() {
  return ::action::ActionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_action_2eproto
