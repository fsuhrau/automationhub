// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto

#include "action.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connect_action_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_action_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAttr_action_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveElement_action_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveOffset_action_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Screenshot_action_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAttr_action_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test_action_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tests_action_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_action_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Touch_action_2eproto;
namespace action {
class DeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Device> _instance;
} _Device_default_instance_;
class DeviceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceRequest> _instance;
} _DeviceRequest_default_instance_;
class DeviceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceResponse> _instance;
} _DeviceResponse_default_instance_;
class InteractionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InteractionRequest> _instance;
} _InteractionRequest_default_instance_;
class InteractionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InteractionResponse> _instance;
} _InteractionResponse_default_instance_;
class SetAttrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAttr> _instance;
} _SetAttr_default_instance_;
class GetAttrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAttr> _instance;
} _GetAttr_default_instance_;
class MoveOffsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveOffset> _instance;
} _MoveOffset_default_instance_;
class MoveElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveElement> _instance;
} _MoveElement_default_instance_;
class TouchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Touch> _instance;
} _Touch_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  const ::action::SetAttr* setattr_;
  const ::action::GetAttr* getattr_;
  const ::action::MoveOffset* moveoffset_;
  const ::action::Touch* touch_;
  const ::action::MoveElement* moveelement_;
  const ::action::Test* test_;
} _Request_default_instance_;
class ConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Connect> _instance;
} _Connect_default_instance_;
class ScreenshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Screenshot> _instance;
} _Screenshot_default_instance_;
class TestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Test> _instance;
} _Test_default_instance_;
class TestsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tests> _instance;
} _Tests_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
  bool visible_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  const ::action::Screenshot* screenshot_;
  const ::action::Connect* connect_;
  const ::action::Tests* tests_;
} _Response_default_instance_;
}  // namespace action
static void InitDefaultsscc_info_Connect_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_Connect_default_instance_;
    new (ptr) ::action::Connect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::Connect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Connect_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Connect_action_2eproto}, {}};

static void InitDefaultsscc_info_Device_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_Device_default_instance_;
    new (ptr) ::action::Device();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::Device::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Device_action_2eproto}, {}};

static void InitDefaultsscc_info_DeviceRequest_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_DeviceRequest_default_instance_;
    new (ptr) ::action::DeviceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::DeviceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceRequest_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceRequest_action_2eproto}, {}};

static void InitDefaultsscc_info_DeviceResponse_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_DeviceResponse_default_instance_;
    new (ptr) ::action::DeviceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::DeviceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceResponse_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceResponse_action_2eproto}, {
      &scc_info_Device_action_2eproto.base,}};

static void InitDefaultsscc_info_GetAttr_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_GetAttr_default_instance_;
    new (ptr) ::action::GetAttr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::GetAttr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAttr_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAttr_action_2eproto}, {}};

static void InitDefaultsscc_info_InteractionRequest_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_InteractionRequest_default_instance_;
    new (ptr) ::action::InteractionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::InteractionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InteractionRequest_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InteractionRequest_action_2eproto}, {}};

static void InitDefaultsscc_info_InteractionResponse_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_InteractionResponse_default_instance_;
    new (ptr) ::action::InteractionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::InteractionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InteractionResponse_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InteractionResponse_action_2eproto}, {}};

static void InitDefaultsscc_info_MoveElement_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_MoveElement_default_instance_;
    new (ptr) ::action::MoveElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::MoveElement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveElement_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveElement_action_2eproto}, {}};

static void InitDefaultsscc_info_MoveOffset_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_MoveOffset_default_instance_;
    new (ptr) ::action::MoveOffset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::MoveOffset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveOffset_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveOffset_action_2eproto}, {}};

static void InitDefaultsscc_info_Request_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_Request_default_instance_;
    new (ptr) ::action::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Request_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Request_action_2eproto}, {
      &scc_info_SetAttr_action_2eproto.base,
      &scc_info_GetAttr_action_2eproto.base,
      &scc_info_MoveOffset_action_2eproto.base,
      &scc_info_Touch_action_2eproto.base,
      &scc_info_MoveElement_action_2eproto.base,
      &scc_info_Test_action_2eproto.base,}};

static void InitDefaultsscc_info_Response_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_Response_default_instance_;
    new (ptr) ::action::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Response_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Response_action_2eproto}, {
      &scc_info_Screenshot_action_2eproto.base,
      &scc_info_Connect_action_2eproto.base,
      &scc_info_Tests_action_2eproto.base,}};

static void InitDefaultsscc_info_Screenshot_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_Screenshot_default_instance_;
    new (ptr) ::action::Screenshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::Screenshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Screenshot_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Screenshot_action_2eproto}, {}};

static void InitDefaultsscc_info_SetAttr_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_SetAttr_default_instance_;
    new (ptr) ::action::SetAttr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::SetAttr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAttr_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetAttr_action_2eproto}, {}};

static void InitDefaultsscc_info_Test_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_Test_default_instance_;
    new (ptr) ::action::Test();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::Test::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Test_action_2eproto}, {}};

static void InitDefaultsscc_info_Tests_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_Tests_default_instance_;
    new (ptr) ::action::Tests();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::Tests::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tests_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tests_action_2eproto}, {
      &scc_info_Test_action_2eproto.base,}};

static void InitDefaultsscc_info_Touch_action_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action::_Touch_default_instance_;
    new (ptr) ::action::Touch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action::Touch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Touch_action_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Touch_action_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_action_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_action_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_action_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_action_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::Device, manager_),
  PROTOBUF_FIELD_OFFSET(::action::Device, deviceid_),
  PROTOBUF_FIELD_OFFSET(::action::Device, name_),
  PROTOBUF_FIELD_OFFSET(::action::Device, operationsystem_),
  PROTOBUF_FIELD_OFFSET(::action::Device, supportedarchitectures_),
  PROTOBUF_FIELD_OFFSET(::action::Device, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::DeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::DeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::DeviceResponse, devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::InteractionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::InteractionRequest, deviceid_),
  PROTOBUF_FIELD_OFFSET(::action::InteractionRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::InteractionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::SetAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::SetAttr, id_),
  PROTOBUF_FIELD_OFFSET(::action::SetAttr, attr_),
  PROTOBUF_FIELD_OFFSET(::action::SetAttr, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::GetAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::GetAttr, id_),
  PROTOBUF_FIELD_OFFSET(::action::GetAttr, attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::MoveOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::MoveOffset, from_),
  PROTOBUF_FIELD_OFFSET(::action::MoveOffset, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::MoveElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::MoveElement, from_),
  PROTOBUF_FIELD_OFFSET(::action::MoveElement, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Touch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::Touch, id_),
  PROTOBUF_FIELD_OFFSET(::action::Touch, xoffset_),
  PROTOBUF_FIELD_OFFSET(::action::Touch, yoffset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::action::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::Request, actionid_),
  PROTOBUF_FIELD_OFFSET(::action::Request, actiontype_),
  offsetof(::action::RequestDefaultTypeInternal, id_),
  offsetof(::action::RequestDefaultTypeInternal, data_),
  offsetof(::action::RequestDefaultTypeInternal, setattr_),
  offsetof(::action::RequestDefaultTypeInternal, getattr_),
  offsetof(::action::RequestDefaultTypeInternal, moveoffset_),
  offsetof(::action::RequestDefaultTypeInternal, touch_),
  offsetof(::action::RequestDefaultTypeInternal, moveelement_),
  offsetof(::action::RequestDefaultTypeInternal, test_),
  PROTOBUF_FIELD_OFFSET(::action::Request, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::Connect, customerid_),
  PROTOBUF_FIELD_OFFSET(::action::Connect, appid_),
  PROTOBUF_FIELD_OFFSET(::action::Connect, apptype_),
  PROTOBUF_FIELD_OFFSET(::action::Connect, deviceid_),
  PROTOBUF_FIELD_OFFSET(::action::Connect, sessionid_),
  PROTOBUF_FIELD_OFFSET(::action::Connect, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Screenshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::Screenshot, sceengraph_),
  PROTOBUF_FIELD_OFFSET(::action::Screenshot, screenshot_),
  PROTOBUF_FIELD_OFFSET(::action::Screenshot, contenttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::Test, assembly_),
  PROTOBUF_FIELD_OFFSET(::action::Test, class__),
  PROTOBUF_FIELD_OFFSET(::action::Test, method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Tests, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::Tests, tests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::action::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action::Response, actionid_),
  PROTOBUF_FIELD_OFFSET(::action::Response, actiontype_),
  PROTOBUF_FIELD_OFFSET(::action::Response, success_),
  offsetof(::action::ResponseDefaultTypeInternal, visible_),
  offsetof(::action::ResponseDefaultTypeInternal, data_),
  offsetof(::action::ResponseDefaultTypeInternal, value_),
  offsetof(::action::ResponseDefaultTypeInternal, screenshot_),
  offsetof(::action::ResponseDefaultTypeInternal, connect_),
  offsetof(::action::ResponseDefaultTypeInternal, tests_),
  PROTOBUF_FIELD_OFFSET(::action::Response, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::action::Device)},
  { 11, -1, sizeof(::action::DeviceRequest)},
  { 16, -1, sizeof(::action::DeviceResponse)},
  { 22, -1, sizeof(::action::InteractionRequest)},
  { 29, -1, sizeof(::action::InteractionResponse)},
  { 34, -1, sizeof(::action::SetAttr)},
  { 42, -1, sizeof(::action::GetAttr)},
  { 49, -1, sizeof(::action::MoveOffset)},
  { 56, -1, sizeof(::action::MoveElement)},
  { 63, -1, sizeof(::action::Touch)},
  { 71, -1, sizeof(::action::Request)},
  { 87, -1, sizeof(::action::Connect)},
  { 98, -1, sizeof(::action::Screenshot)},
  { 106, -1, sizeof(::action::Test)},
  { 114, -1, sizeof(::action::Tests)},
  { 120, -1, sizeof(::action::Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_DeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_DeviceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_InteractionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_InteractionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_SetAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_GetAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_MoveOffset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_MoveElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Touch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Connect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Screenshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Test_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Tests_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Response_default_instance_),
};

const char descriptor_table_protodef_action_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014action.proto\022\006action\"\202\001\n\006Device\022\017\n\007man"
  "ager\030\001 \001(\t\022\020\n\010deviceId\030\002 \001(\t\022\014\n\004name\030\003 \001"
  "(\t\022\027\n\017OperationSystem\030\004 \001(\t\022\036\n\026Supported"
  "Architectures\030\005 \001(\t\022\016\n\006Status\030\006 \001(\t\"\017\n\rD"
  "eviceRequest\"1\n\016DeviceResponse\022\037\n\007device"
  "s\030\001 \003(\0132\016.action.Device\"S\n\022InteractionRe"
  "quest\022\020\n\010DeviceID\030\001 \001(\t\022+\n\004type\030\002 \001(\0162\035."
  "action.DeviceInteractionType\"\025\n\023Interact"
  "ionResponse\"0\n\007SetAttr\022\n\n\002id\030\001 \001(\t\022\014\n\004at"
  "tr\030\002 \001(\t\022\013\n\003val\030\003 \001(\t\"#\n\007GetAttr\022\n\n\002id\030\001"
  " \001(\t\022\014\n\004attr\030\002 \001(\t\"&\n\nMoveOffset\022\014\n\004from"
  "\030\001 \001(\003\022\n\n\002to\030\002 \001(\003\"\'\n\013MoveElement\022\014\n\004fro"
  "m\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\"5\n\005Touch\022\n\n\002id\030\001 \001(\t"
  "\022\017\n\007xoffset\030\002 \001(\003\022\017\n\007yoffset\030\003 \001(\003\"\310\002\n\007R"
  "equest\022\020\n\010actionID\030\001 \001(\t\022&\n\nactionType\030\002"
  " \001(\0162\022.action.ActionType\022\014\n\002id\030\003 \001(\tH\000\022\016"
  "\n\004data\030\004 \001(\tH\000\022\"\n\007setAttr\030\005 \001(\0132\017.action"
  ".SetAttrH\000\022\"\n\007getAttr\030\006 \001(\0132\017.action.Get"
  "AttrH\000\022(\n\nmoveOffset\030\007 \001(\0132\022.action.Move"
  "OffsetH\000\022\036\n\005touch\030\010 \001(\0132\r.action.TouchH\000"
  "\022*\n\013moveElement\030\t \001(\0132\023.action.MoveEleme"
  "ntH\000\022\034\n\004test\030\n \001(\0132\014.action.TestH\000B\t\n\007pa"
  "yload\"\204\001\n\007Connect\022\022\n\ncustomerId\030\001 \001(\t\022\r\n"
  "\005appID\030\002 \001(\t\022 \n\007appType\030\003 \001(\0162\017.action.A"
  "ppType\022\020\n\010deviceID\030\004 \001(\t\022\021\n\tsessionID\030\005 "
  "\001(\t\022\017\n\007version\030\006 \001(\t\"^\n\nScreenshot\022\022\n\nsc"
  "eengraph\030\001 \001(\014\022\022\n\nscreenshot\030\002 \001(\014\022(\n\013co"
  "ntentType\030\003 \001(\0162\023.action.ContentType\"7\n\004"
  "Test\022\020\n\010assembly\030\001 \001(\t\022\r\n\005class\030\002 \001(\t\022\016\n"
  "\006method\030\003 \001(\t\"$\n\005Tests\022\033\n\005tests\030\001 \003(\0132\014."
  "action.Test\"\202\002\n\010Response\022\020\n\010actionID\030\001 \001"
  "(\t\022&\n\nactionType\030\002 \001(\0162\022.action.ActionTy"
  "pe\022\017\n\007success\030\003 \001(\010\022\021\n\007visible\030\004 \001(\010H\000\022\016"
  "\n\004data\030\005 \001(\014H\000\022\017\n\005value\030\006 \001(\tH\000\022(\n\nscree"
  "nshot\030\007 \001(\0132\022.action.ScreenshotH\000\022\"\n\007con"
  "nect\030\010 \001(\0132\017.action.ConnectH\000\022\036\n\005tests\030\t"
  " \001(\0132\r.action.TestsH\000B\t\n\007payload*\220\002\n\025Dev"
  "iceInteractionType\022\016\n\nLockDevice\020\000\022\020\n\014Un"
  "lockDevice\020\001\022\022\n\016GetDeviceState\020\002\022\022\n\016IsAp"
  "pInstalled\020\003\022\016\n\nInstallApp\020\004\022\020\n\014Uninstal"
  "lApp\020\005\022\014\n\010StartApp\020\006\022\013\n\007StopApp\020\007\022\022\n\016IsA"
  "ppConnected\020\010\022\022\n\016StartRecording\020\t\022\021\n\rSto"
  "pRecording\020\n\022\016\n\nHasFeature\020\013\022\022\n\016ExecuteF"
  "eature\020\014\022\021\n\rGetScreenShot\020\r*\264\002\n\nActionTy"
  "pe\022\n\n\006Custom\020\000\022\021\n\rGetSceneGraph\020\001\022\026\n\022Ele"
  "mentIsDisplayed\020\002\022\023\n\017ElementSetValue\020\003\022\023"
  "\n\017ElementGetValue\020\004\022\010\n\004Move\020\005\022\r\n\tTouchDo"
  "wn\020\006\022\r\n\tTouchMove\020\007\022\013\n\007TouchUp\020\010\022\017\n\013Drag"
  "AndDrop\020\t\022\r\n\tLongTouch\020\n\022\020\n\014ElementTouch"
  "\020\013\022\021\n\rGetScreenshot\020\014\022\014\n\010GetTests\020\r\022\017\n\013E"
  "xecuteTest\020\016\022\023\n\017ExecutionStatus\020\017\022\007\n\003Log"
  "\020\020\022\016\n\nUnityReset\020\021*0\n\013ContentType\022\016\n\nFla"
  "tbuffer\020\000\022\010\n\004Json\020\001\022\007\n\003Xml\020\002*\037\n\007AppType\022"
  "\t\n\005Cocos\020\000\022\t\n\005Unity\020\0012\337\001\n\014RemoteDevice\022A"
  "\n\nDeviceList\022\025.action.DeviceRequest\032\026.ac"
  "tion.DeviceResponse\"\000(\0010\001\022R\n\021DeviceInter"
  "action\022\032.action.InteractionRequest\032\033.act"
  "ion.InteractionResponse\"\000(\0010\001\0228\n\rActionE"
  "xecute\022\017.action.Request\032\020.action.Respons"
  "e\"\000(\0010\001B Z\nhub/action\252\002\021Com.AutomationHu"
  "bb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_action_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_action_2eproto_sccs[16] = {
  &scc_info_Connect_action_2eproto.base,
  &scc_info_Device_action_2eproto.base,
  &scc_info_DeviceRequest_action_2eproto.base,
  &scc_info_DeviceResponse_action_2eproto.base,
  &scc_info_GetAttr_action_2eproto.base,
  &scc_info_InteractionRequest_action_2eproto.base,
  &scc_info_InteractionResponse_action_2eproto.base,
  &scc_info_MoveElement_action_2eproto.base,
  &scc_info_MoveOffset_action_2eproto.base,
  &scc_info_Request_action_2eproto.base,
  &scc_info_Response_action_2eproto.base,
  &scc_info_Screenshot_action_2eproto.base,
  &scc_info_SetAttr_action_2eproto.base,
  &scc_info_Test_action_2eproto.base,
  &scc_info_Tests_action_2eproto.base,
  &scc_info_Touch_action_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_action_2eproto_once;
static bool descriptor_table_action_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_action_2eproto = {
  &descriptor_table_action_2eproto_initialized, descriptor_table_protodef_action_2eproto, "action.proto", 2409,
  &descriptor_table_action_2eproto_once, descriptor_table_action_2eproto_sccs, descriptor_table_action_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_action_2eproto::offsets,
  file_level_metadata_action_2eproto, 16, file_level_enum_descriptors_action_2eproto, file_level_service_descriptors_action_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_action_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_action_2eproto), true);
namespace action {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceInteractionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_2eproto);
  return file_level_enum_descriptors_action_2eproto[0];
}
bool DeviceInteractionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_2eproto);
  return file_level_enum_descriptors_action_2eproto[1];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_2eproto);
  return file_level_enum_descriptors_action_2eproto[2];
}
bool ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_2eproto);
  return file_level_enum_descriptors_action_2eproto[3];
}
bool AppType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Device::InitAsDefaultInstance() {
}
class Device::_Internal {
 public:
};

Device::Device()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manager_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manager().empty()) {
    manager_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manager_);
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  operationsystem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operationsystem().empty()) {
    operationsystem_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operationsystem_);
  }
  supportedarchitectures_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_supportedarchitectures().empty()) {
    supportedarchitectures_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.supportedarchitectures_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:action.Device)
}

void Device::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Device_action_2eproto.base);
  manager_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operationsystem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supportedarchitectures_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:action.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  manager_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operationsystem_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supportedarchitectures_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Device& Device::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Device_action_2eproto.base);
  return *internal_default_instance();
}


void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manager_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operationsystem_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supportedarchitectures_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string manager = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_manager(), ptr, ctx, "action.Device.manager");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_deviceid(), ptr, ctx, "action.Device.deviceId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "action.Device.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OperationSystem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_operationsystem(), ptr, ctx, "action.Device.OperationSystem");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SupportedArchitectures = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_supportedarchitectures(), ptr, ctx, "action.Device.SupportedArchitectures");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "action.Device.Status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manager = 1;
  if (this->manager().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manager().data(), static_cast<int>(this->_internal_manager().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.manager");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_manager(), target);
  }

  // string deviceId = 2;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.deviceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string OperationSystem = 4;
  if (this->operationsystem().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operationsystem().data(), static_cast<int>(this->_internal_operationsystem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.OperationSystem");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_operationsystem(), target);
  }

  // string SupportedArchitectures = 5;
  if (this->supportedarchitectures().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_supportedarchitectures().data(), static_cast<int>(this->_internal_supportedarchitectures().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.SupportedArchitectures");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_supportedarchitectures(), target);
  }

  // string Status = 6;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.Status");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string manager = 1;
  if (this->manager().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manager());
  }

  // string deviceId = 2;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string OperationSystem = 4;
  if (this->operationsystem().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operationsystem());
  }

  // string SupportedArchitectures = 5;
  if (this->supportedarchitectures().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_supportedarchitectures());
  }

  // string Status = 6;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manager().size() > 0) {

    manager_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manager_);
  }
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.operationsystem().size() > 0) {

    operationsystem_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operationsystem_);
  }
  if (from.supportedarchitectures().size() > 0) {

    supportedarchitectures_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.supportedarchitectures_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  manager_.Swap(&other->manager_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  operationsystem_.Swap(&other->operationsystem_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  supportedarchitectures_.Swap(&other->supportedarchitectures_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceRequest::InitAsDefaultInstance() {
}
class DeviceRequest::_Internal {
 public:
};

DeviceRequest::DeviceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.DeviceRequest)
}
DeviceRequest::DeviceRequest(const DeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:action.DeviceRequest)
}

void DeviceRequest::SharedCtor() {
}

DeviceRequest::~DeviceRequest() {
  // @@protoc_insertion_point(destructor:action.DeviceRequest)
  SharedDtor();
}

void DeviceRequest::SharedDtor() {
}

void DeviceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceRequest& DeviceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceRequest_action_2eproto.base);
  return *internal_default_instance();
}


void DeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:action.DeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DeviceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.DeviceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.DeviceRequest)
  return target;
}

size_t DeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.DeviceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.DeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.DeviceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.DeviceRequest)
    MergeFrom(*source);
  }
}

void DeviceRequest::MergeFrom(const DeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.DeviceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeviceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.DeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceRequest::CopyFrom(const DeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.DeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceRequest::IsInitialized() const {
  return true;
}

void DeviceRequest::InternalSwap(DeviceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceResponse::InitAsDefaultInstance() {
}
class DeviceResponse::_Internal {
 public:
};

DeviceResponse::DeviceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.DeviceResponse)
}
DeviceResponse::DeviceResponse(const DeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:action.DeviceResponse)
}

void DeviceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceResponse_action_2eproto.base);
}

DeviceResponse::~DeviceResponse() {
  // @@protoc_insertion_point(destructor:action.DeviceResponse)
  SharedDtor();
}

void DeviceResponse::SharedDtor() {
}

void DeviceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceResponse& DeviceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceResponse_action_2eproto.base);
  return *internal_default_instance();
}


void DeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:action.DeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _internal_metadata_.Clear();
}

const char* DeviceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .action.Device devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.DeviceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .action.Device devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.DeviceResponse)
  return target;
}

size_t DeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.DeviceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .action.Device devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.DeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.DeviceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.DeviceResponse)
    MergeFrom(*source);
  }
}

void DeviceResponse::MergeFrom(const DeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.DeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void DeviceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.DeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceResponse::CopyFrom(const DeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.DeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceResponse::IsInitialized() const {
  return true;
}

void DeviceResponse::InternalSwap(DeviceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InteractionRequest::InitAsDefaultInstance() {
}
class InteractionRequest::_Internal {
 public:
};

InteractionRequest::InteractionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.InteractionRequest)
}
InteractionRequest::InteractionRequest(const InteractionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:action.InteractionRequest)
}

void InteractionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InteractionRequest_action_2eproto.base);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

InteractionRequest::~InteractionRequest() {
  // @@protoc_insertion_point(destructor:action.InteractionRequest)
  SharedDtor();
}

void InteractionRequest::SharedDtor() {
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InteractionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InteractionRequest& InteractionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InteractionRequest_action_2eproto.base);
  return *internal_default_instance();
}


void InteractionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:action.InteractionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* InteractionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string DeviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_deviceid(), ptr, ctx, "action.InteractionRequest.DeviceID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.DeviceInteractionType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::action::DeviceInteractionType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InteractionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.InteractionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string DeviceID = 1;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.InteractionRequest.DeviceID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // .action.DeviceInteractionType type = 2;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.InteractionRequest)
  return target;
}

size_t InteractionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.InteractionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DeviceID = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // .action.DeviceInteractionType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InteractionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.InteractionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InteractionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.InteractionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.InteractionRequest)
    MergeFrom(*source);
  }
}

void InteractionRequest::MergeFrom(const InteractionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.InteractionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void InteractionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.InteractionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractionRequest::CopyFrom(const InteractionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.InteractionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractionRequest::IsInitialized() const {
  return true;
}

void InteractionRequest::InternalSwap(InteractionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InteractionResponse::InitAsDefaultInstance() {
}
class InteractionResponse::_Internal {
 public:
};

InteractionResponse::InteractionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.InteractionResponse)
}
InteractionResponse::InteractionResponse(const InteractionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:action.InteractionResponse)
}

void InteractionResponse::SharedCtor() {
}

InteractionResponse::~InteractionResponse() {
  // @@protoc_insertion_point(destructor:action.InteractionResponse)
  SharedDtor();
}

void InteractionResponse::SharedDtor() {
}

void InteractionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InteractionResponse& InteractionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InteractionResponse_action_2eproto.base);
  return *internal_default_instance();
}


void InteractionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:action.InteractionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* InteractionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InteractionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.InteractionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.InteractionResponse)
  return target;
}

size_t InteractionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.InteractionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InteractionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.InteractionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InteractionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.InteractionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.InteractionResponse)
    MergeFrom(*source);
  }
}

void InteractionResponse::MergeFrom(const InteractionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.InteractionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InteractionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.InteractionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractionResponse::CopyFrom(const InteractionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.InteractionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractionResponse::IsInitialized() const {
  return true;
}

void InteractionResponse::InternalSwap(InteractionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAttr::InitAsDefaultInstance() {
}
class SetAttr::_Internal {
 public:
};

SetAttr::SetAttr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.SetAttr)
}
SetAttr::SetAttr(const SetAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attr().empty()) {
    attr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attr_);
  }
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_val().empty()) {
    val_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  // @@protoc_insertion_point(copy_constructor:action.SetAttr)
}

void SetAttr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAttr_action_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetAttr::~SetAttr() {
  // @@protoc_insertion_point(destructor:action.SetAttr)
  SharedDtor();
}

void SetAttr::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAttr& SetAttr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAttr_action_2eproto.base);
  return *internal_default_instance();
}


void SetAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:action.SetAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SetAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "action.SetAttr.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_attr(), ptr, ctx, "action.SetAttr.attr");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_val(), ptr, ctx, "action.SetAttr.val");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAttr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.SetAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.SetAttr.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string attr = 2;
  if (this->attr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attr().data(), static_cast<int>(this->_internal_attr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.SetAttr.attr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_attr(), target);
  }

  // string val = 3;
  if (this->val().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_val().data(), static_cast<int>(this->_internal_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.SetAttr.val");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.SetAttr)
  return target;
}

size_t SetAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.SetAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string attr = 2;
  if (this->attr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attr());
  }

  // string val = 3;
  if (this->val().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAttr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.SetAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAttr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAttr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.SetAttr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.SetAttr)
    MergeFrom(*source);
  }
}

void SetAttr::MergeFrom(const SetAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.SetAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.attr().size() > 0) {

    attr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attr_);
  }
  if (from.val().size() > 0) {

    val_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
}

void SetAttr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.SetAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAttr::CopyFrom(const SetAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.SetAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAttr::IsInitialized() const {
  return true;
}

void SetAttr::InternalSwap(SetAttr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attr_.Swap(&other->attr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  val_.Swap(&other->val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAttr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAttr::InitAsDefaultInstance() {
}
class GetAttr::_Internal {
 public:
};

GetAttr::GetAttr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.GetAttr)
}
GetAttr::GetAttr(const GetAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attr().empty()) {
    attr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attr_);
  }
  // @@protoc_insertion_point(copy_constructor:action.GetAttr)
}

void GetAttr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAttr_action_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAttr::~GetAttr() {
  // @@protoc_insertion_point(destructor:action.GetAttr)
  SharedDtor();
}

void GetAttr::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAttr& GetAttr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAttr_action_2eproto.base);
  return *internal_default_instance();
}


void GetAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:action.GetAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "action.GetAttr.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_attr(), ptr, ctx, "action.GetAttr.attr");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAttr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.GetAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.GetAttr.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string attr = 2;
  if (this->attr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attr().data(), static_cast<int>(this->_internal_attr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.GetAttr.attr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_attr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.GetAttr)
  return target;
}

size_t GetAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.GetAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string attr = 2;
  if (this->attr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAttr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.GetAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAttr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAttr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.GetAttr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.GetAttr)
    MergeFrom(*source);
  }
}

void GetAttr::MergeFrom(const GetAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.GetAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.attr().size() > 0) {

    attr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attr_);
  }
}

void GetAttr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.GetAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttr::CopyFrom(const GetAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.GetAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttr::IsInitialized() const {
  return true;
}

void GetAttr::InternalSwap(GetAttr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attr_.Swap(&other->attr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAttr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveOffset::InitAsDefaultInstance() {
}
class MoveOffset::_Internal {
 public:
};

MoveOffset::MoveOffset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.MoveOffset)
}
MoveOffset::MoveOffset(const MoveOffset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:action.MoveOffset)
}

void MoveOffset::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

MoveOffset::~MoveOffset() {
  // @@protoc_insertion_point(destructor:action.MoveOffset)
  SharedDtor();
}

void MoveOffset::SharedDtor() {
}

void MoveOffset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveOffset& MoveOffset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveOffset_action_2eproto.base);
  return *internal_default_instance();
}


void MoveOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:action.MoveOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear();
}

const char* MoveOffset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveOffset::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.MoveOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 from = 1;
  if (this->from() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_from(), target);
  }

  // int64 to = 2;
  if (this->to() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.MoveOffset)
  return target;
}

size_t MoveOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.MoveOffset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_from());
  }

  // int64 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveOffset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.MoveOffset)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveOffset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveOffset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.MoveOffset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.MoveOffset)
    MergeFrom(*source);
  }
}

void MoveOffset::MergeFrom(const MoveOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.MoveOffset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
}

void MoveOffset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.MoveOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveOffset::CopyFrom(const MoveOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.MoveOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveOffset::IsInitialized() const {
  return true;
}

void MoveOffset::InternalSwap(MoveOffset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveOffset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveElement::InitAsDefaultInstance() {
}
class MoveElement::_Internal {
 public:
};

MoveElement::MoveElement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.MoveElement)
}
MoveElement::MoveElement(const MoveElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  // @@protoc_insertion_point(copy_constructor:action.MoveElement)
}

void MoveElement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveElement_action_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoveElement::~MoveElement() {
  // @@protoc_insertion_point(destructor:action.MoveElement)
  SharedDtor();
}

void MoveElement::SharedDtor() {
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveElement& MoveElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveElement_action_2eproto.base);
  return *internal_default_instance();
}


void MoveElement::Clear() {
// @@protoc_insertion_point(message_clear_start:action.MoveElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MoveElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_from(), ptr, ctx, "action.MoveElement.from");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_to(), ptr, ctx, "action.MoveElement.to");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveElement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.MoveElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.MoveElement.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.MoveElement.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.MoveElement)
  return target;
}

size_t MoveElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.MoveElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.MoveElement)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.MoveElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.MoveElement)
    MergeFrom(*source);
  }
}

void MoveElement::MergeFrom(const MoveElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.MoveElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
}

void MoveElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.MoveElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveElement::CopyFrom(const MoveElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.MoveElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveElement::IsInitialized() const {
  return true;
}

void MoveElement::InternalSwap(MoveElement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Touch::InitAsDefaultInstance() {
}
class Touch::_Internal {
 public:
};

Touch::Touch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.Touch)
}
Touch::Touch(const Touch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&xoffset_, &from.xoffset_,
    static_cast<size_t>(reinterpret_cast<char*>(&yoffset_) -
    reinterpret_cast<char*>(&xoffset_)) + sizeof(yoffset_));
  // @@protoc_insertion_point(copy_constructor:action.Touch)
}

void Touch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Touch_action_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&xoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yoffset_) -
      reinterpret_cast<char*>(&xoffset_)) + sizeof(yoffset_));
}

Touch::~Touch() {
  // @@protoc_insertion_point(destructor:action.Touch)
  SharedDtor();
}

void Touch::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Touch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Touch& Touch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Touch_action_2eproto.base);
  return *internal_default_instance();
}


void Touch::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Touch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&xoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yoffset_) -
      reinterpret_cast<char*>(&xoffset_)) + sizeof(yoffset_));
  _internal_metadata_.Clear();
}

const char* Touch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "action.Touch.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 xoffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 yoffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          yoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Touch::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Touch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Touch.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 xoffset = 2;
  if (this->xoffset() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_xoffset(), target);
  }

  // int64 yoffset = 3;
  if (this->yoffset() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_yoffset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Touch)
  return target;
}

size_t Touch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Touch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int64 xoffset = 2;
  if (this->xoffset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_xoffset());
  }

  // int64 yoffset = 3;
  if (this->yoffset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_yoffset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Touch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.Touch)
  GOOGLE_DCHECK_NE(&from, this);
  const Touch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Touch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.Touch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.Touch)
    MergeFrom(*source);
  }
}

void Touch::MergeFrom(const Touch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Touch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.xoffset() != 0) {
    _internal_set_xoffset(from._internal_xoffset());
  }
  if (from.yoffset() != 0) {
    _internal_set_yoffset(from._internal_yoffset());
  }
}

void Touch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.Touch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Touch::CopyFrom(const Touch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Touch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Touch::IsInitialized() const {
  return true;
}

void Touch::InternalSwap(Touch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(xoffset_, other->xoffset_);
  swap(yoffset_, other->yoffset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Touch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::action::_Request_default_instance_.id_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::action::_Request_default_instance_.data_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::action::_Request_default_instance_.setattr_ = const_cast< ::action::SetAttr*>(
      ::action::SetAttr::internal_default_instance());
  ::action::_Request_default_instance_.getattr_ = const_cast< ::action::GetAttr*>(
      ::action::GetAttr::internal_default_instance());
  ::action::_Request_default_instance_.moveoffset_ = const_cast< ::action::MoveOffset*>(
      ::action::MoveOffset::internal_default_instance());
  ::action::_Request_default_instance_.touch_ = const_cast< ::action::Touch*>(
      ::action::Touch::internal_default_instance());
  ::action::_Request_default_instance_.moveelement_ = const_cast< ::action::MoveElement*>(
      ::action::MoveElement::internal_default_instance());
  ::action::_Request_default_instance_.test_ = const_cast< ::action::Test*>(
      ::action::Test::internal_default_instance());
}
class Request::_Internal {
 public:
  static const ::action::SetAttr& setattr(const Request* msg);
  static const ::action::GetAttr& getattr(const Request* msg);
  static const ::action::MoveOffset& moveoffset(const Request* msg);
  static const ::action::Touch& touch(const Request* msg);
  static const ::action::MoveElement& moveelement(const Request* msg);
  static const ::action::Test& test(const Request* msg);
};

const ::action::SetAttr&
Request::_Internal::setattr(const Request* msg) {
  return *msg->payload_.setattr_;
}
const ::action::GetAttr&
Request::_Internal::getattr(const Request* msg) {
  return *msg->payload_.getattr_;
}
const ::action::MoveOffset&
Request::_Internal::moveoffset(const Request* msg) {
  return *msg->payload_.moveoffset_;
}
const ::action::Touch&
Request::_Internal::touch(const Request* msg) {
  return *msg->payload_.touch_;
}
const ::action::MoveElement&
Request::_Internal::moveelement(const Request* msg) {
  return *msg->payload_.moveelement_;
}
const ::action::Test&
Request::_Internal::test(const Request* msg) {
  return *msg->payload_.test_;
}
void Request::set_allocated_setattr(::action::SetAttr* setattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (setattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      setattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setattr, submessage_arena);
    }
    set_has_setattr();
    payload_.setattr_ = setattr;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.setAttr)
}
void Request::set_allocated_getattr(::action::GetAttr* getattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (getattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getattr, submessage_arena);
    }
    set_has_getattr();
    payload_.getattr_ = getattr;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.getAttr)
}
void Request::set_allocated_moveoffset(::action::MoveOffset* moveoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (moveoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      moveoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moveoffset, submessage_arena);
    }
    set_has_moveoffset();
    payload_.moveoffset_ = moveoffset;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.moveOffset)
}
void Request::set_allocated_touch(::action::Touch* touch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (touch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      touch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch, submessage_arena);
    }
    set_has_touch();
    payload_.touch_ = touch;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.touch)
}
void Request::set_allocated_moveelement(::action::MoveElement* moveelement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (moveelement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      moveelement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moveelement, submessage_arena);
    }
    set_has_moveelement();
    payload_.moveelement_ = moveelement;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.moveElement)
}
void Request::set_allocated_test(::action::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    set_has_test();
    payload_.test_ = test;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.test)
}
Request::Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actionid().empty()) {
    actionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actionid_);
  }
  actiontype_ = from.actiontype_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kData: {
      _internal_set_data(from._internal_data());
      break;
    }
    case kSetAttr: {
      _internal_mutable_setattr()->::action::SetAttr::MergeFrom(from._internal_setattr());
      break;
    }
    case kGetAttr: {
      _internal_mutable_getattr()->::action::GetAttr::MergeFrom(from._internal_getattr());
      break;
    }
    case kMoveOffset: {
      _internal_mutable_moveoffset()->::action::MoveOffset::MergeFrom(from._internal_moveoffset());
      break;
    }
    case kTouch: {
      _internal_mutable_touch()->::action::Touch::MergeFrom(from._internal_touch());
      break;
    }
    case kMoveElement: {
      _internal_mutable_moveelement()->::action::MoveElement::MergeFrom(from._internal_moveelement());
      break;
    }
    case kTest: {
      _internal_mutable_test()->::action::Test::MergeFrom(from._internal_test());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:action.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_action_2eproto.base);
  actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actiontype_ = 0;
  clear_has_payload();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:action.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  actionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_action_2eproto.base);
  return *internal_default_instance();
}


void Request::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:action.Request)
  switch (payload_case()) {
    case kId: {
      payload_.id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kData: {
      payload_.data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kSetAttr: {
      delete payload_.setattr_;
      break;
    }
    case kGetAttr: {
      delete payload_.getattr_;
      break;
    }
    case kMoveOffset: {
      delete payload_.moveoffset_;
      break;
    }
    case kTouch: {
      delete payload_.touch_;
      break;
    }
    case kMoveElement: {
      delete payload_.moveelement_;
      break;
    }
    case kTest: {
      delete payload_.test_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actiontype_ = 0;
  clear_payload();
  _internal_metadata_.Clear();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string actionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_actionid(), ptr, ctx, "action.Request.actionID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.ActionType actionType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_actiontype(static_cast<::action::ActionType>(val));
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "action.Request.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_data(), ptr, ctx, "action.Request.data");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.SetAttr setAttr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_setattr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.GetAttr getAttr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_getattr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.MoveOffset moveOffset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_moveoffset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.Touch touch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.MoveElement moveElement = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_moveelement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.Test test = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string actionID = 1;
  if (this->actionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actionid().data(), static_cast<int>(this->_internal_actionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Request.actionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_actionid(), target);
  }

  // .action.ActionType actionType = 2;
  if (this->actiontype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_actiontype(), target);
  }

  // string id = 3;
  if (_internal_has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Request.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // string data = 4;
  if (_internal_has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Request.data");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_data(), target);
  }

  // .action.SetAttr setAttr = 5;
  if (_internal_has_setattr()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::setattr(this), target, stream);
  }

  // .action.GetAttr getAttr = 6;
  if (_internal_has_getattr()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::getattr(this), target, stream);
  }

  // .action.MoveOffset moveOffset = 7;
  if (_internal_has_moveoffset()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::moveoffset(this), target, stream);
  }

  // .action.Touch touch = 8;
  if (_internal_has_touch()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::touch(this), target, stream);
  }

  // .action.MoveElement moveElement = 9;
  if (_internal_has_moveelement()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::moveelement(this), target, stream);
  }

  // .action.Test test = 10;
  if (_internal_has_test()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actionID = 1;
  if (this->actionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actionid());
  }

  // .action.ActionType actionType = 2;
  if (this->actiontype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actiontype());
  }

  switch (payload_case()) {
    // string id = 3;
    case kId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
      break;
    }
    // string data = 4;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data());
      break;
    }
    // .action.SetAttr setAttr = 5;
    case kSetAttr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.setattr_);
      break;
    }
    // .action.GetAttr getAttr = 6;
    case kGetAttr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.getattr_);
      break;
    }
    // .action.MoveOffset moveOffset = 7;
    case kMoveOffset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.moveoffset_);
      break;
    }
    // .action.Touch touch = 8;
    case kTouch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.touch_);
      break;
    }
    // .action.MoveElement moveElement = 9;
    case kMoveElement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.moveelement_);
      break;
    }
    // .action.Test test = 10;
    case kTest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.test_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actionid().size() > 0) {

    actionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actionid_);
  }
  if (from.actiontype() != 0) {
    _internal_set_actiontype(from._internal_actiontype());
  }
  switch (from.payload_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kData: {
      _internal_set_data(from._internal_data());
      break;
    }
    case kSetAttr: {
      _internal_mutable_setattr()->::action::SetAttr::MergeFrom(from._internal_setattr());
      break;
    }
    case kGetAttr: {
      _internal_mutable_getattr()->::action::GetAttr::MergeFrom(from._internal_getattr());
      break;
    }
    case kMoveOffset: {
      _internal_mutable_moveoffset()->::action::MoveOffset::MergeFrom(from._internal_moveoffset());
      break;
    }
    case kTouch: {
      _internal_mutable_touch()->::action::Touch::MergeFrom(from._internal_touch());
      break;
    }
    case kMoveElement: {
      _internal_mutable_moveelement()->::action::MoveElement::MergeFrom(from._internal_moveelement());
      break;
    }
    case kTest: {
      _internal_mutable_test()->::action::Test::MergeFrom(from._internal_test());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  actionid_.Swap(&other->actionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(actiontype_, other->actiontype_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Connect::InitAsDefaultInstance() {
}
class Connect::_Internal {
 public:
};

Connect::Connect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.Connect)
}
Connect::Connect(const Connect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  customerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customerid().empty()) {
    customerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.customerid_);
  }
  appid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appid().empty()) {
    appid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sessionid().empty()) {
    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  apptype_ = from.apptype_;
  // @@protoc_insertion_point(copy_constructor:action.Connect)
}

void Connect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Connect_action_2eproto.base);
  customerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apptype_ = 0;
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:action.Connect)
  SharedDtor();
}

void Connect::SharedDtor() {
  customerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Connect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Connect& Connect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Connect_action_2eproto.base);
  return *internal_default_instance();
}


void Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Connect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  apptype_ = 0;
  _internal_metadata_.Clear();
}

const char* Connect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_customerid(), ptr, ctx, "action.Connect.customerId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_appid(), ptr, ctx, "action.Connect.appID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.AppType appType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_apptype(static_cast<::action::AppType>(val));
        } else goto handle_unusual;
        continue;
      // string deviceID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_deviceid(), ptr, ctx, "action.Connect.deviceID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sessionID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_sessionid(), ptr, ctx, "action.Connect.sessionID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_version(), ptr, ctx, "action.Connect.version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Connect::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Connect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customerId = 1;
  if (this->customerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customerid().data(), static_cast<int>(this->_internal_customerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Connect.customerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customerid(), target);
  }

  // string appID = 2;
  if (this->appid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Connect.appID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_appid(), target);
  }

  // .action.AppType appType = 3;
  if (this->apptype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_apptype(), target);
  }

  // string deviceID = 4;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Connect.deviceID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deviceid(), target);
  }

  // string sessionID = 5;
  if (this->sessionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Connect.sessionID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sessionid(), target);
  }

  // string version = 6;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Connect.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Connect)
  return target;
}

size_t Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Connect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customerId = 1;
  if (this->customerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customerid());
  }

  // string appID = 2;
  if (this->appid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string deviceID = 4;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string sessionID = 5;
  if (this->sessionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // string version = 6;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .action.AppType appType = 3;
  if (this->apptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_apptype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Connect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  const Connect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Connect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.Connect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.Connect)
    MergeFrom(*source);
  }
}

void Connect::MergeFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.customerid().size() > 0) {

    customerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.customerid_);
  }
  if (from.appid().size() > 0) {

    appid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.sessionid().size() > 0) {

    sessionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sessionid_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.apptype() != 0) {
    _internal_set_apptype(from._internal_apptype());
  }
}

void Connect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connect::CopyFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {
  return true;
}

void Connect::InternalSwap(Connect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  customerid_.Swap(&other->customerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  appid_.Swap(&other->appid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sessionid_.Swap(&other->sessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(apptype_, other->apptype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Connect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Screenshot::InitAsDefaultInstance() {
}
class Screenshot::_Internal {
 public:
};

Screenshot::Screenshot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.Screenshot)
}
Screenshot::Screenshot(const Screenshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sceengraph_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sceengraph().empty()) {
    sceengraph_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceengraph_);
  }
  screenshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_screenshot().empty()) {
    screenshot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.screenshot_);
  }
  contenttype_ = from.contenttype_;
  // @@protoc_insertion_point(copy_constructor:action.Screenshot)
}

void Screenshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Screenshot_action_2eproto.base);
  sceengraph_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contenttype_ = 0;
}

Screenshot::~Screenshot() {
  // @@protoc_insertion_point(destructor:action.Screenshot)
  SharedDtor();
}

void Screenshot::SharedDtor() {
  sceengraph_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenshot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Screenshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Screenshot& Screenshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Screenshot_action_2eproto.base);
  return *internal_default_instance();
}


void Screenshot::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Screenshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceengraph_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenshot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contenttype_ = 0;
  _internal_metadata_.Clear();
}

const char* Screenshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes sceengraph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_sceengraph(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes screenshot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_screenshot(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.ContentType contentType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_contenttype(static_cast<::action::ContentType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Screenshot::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Screenshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sceengraph = 1;
  if (this->sceengraph().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sceengraph(), target);
  }

  // bytes screenshot = 2;
  if (this->screenshot().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_screenshot(), target);
  }

  // .action.ContentType contentType = 3;
  if (this->contenttype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_contenttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Screenshot)
  return target;
}

size_t Screenshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Screenshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sceengraph = 1;
  if (this->sceengraph().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sceengraph());
  }

  // bytes screenshot = 2;
  if (this->screenshot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_screenshot());
  }

  // .action.ContentType contentType = 3;
  if (this->contenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contenttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Screenshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.Screenshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Screenshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Screenshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.Screenshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.Screenshot)
    MergeFrom(*source);
  }
}

void Screenshot::MergeFrom(const Screenshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Screenshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sceengraph().size() > 0) {

    sceengraph_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceengraph_);
  }
  if (from.screenshot().size() > 0) {

    screenshot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.screenshot_);
  }
  if (from.contenttype() != 0) {
    _internal_set_contenttype(from._internal_contenttype());
  }
}

void Screenshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.Screenshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Screenshot::CopyFrom(const Screenshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Screenshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screenshot::IsInitialized() const {
  return true;
}

void Screenshot::InternalSwap(Screenshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sceengraph_.Swap(&other->sceengraph_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  screenshot_.Swap(&other->screenshot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(contenttype_, other->contenttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Screenshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Test::InitAsDefaultInstance() {
}
class Test::_Internal {
 public:
};

Test::Test()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.Test)
}
Test::Test(const Test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  assembly_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assembly().empty()) {
    assembly_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assembly_);
  }
  class__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_().empty()) {
    class__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class__);
  }
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  // @@protoc_insertion_point(copy_constructor:action.Test)
}

void Test::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Test_action_2eproto.base);
  assembly_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:action.Test)
  SharedDtor();
}

void Test::SharedDtor() {
  assembly_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test& Test::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Test_action_2eproto.base);
  return *internal_default_instance();
}


void Test::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assembly_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string assembly = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_assembly(), ptr, ctx, "action.Test.assembly");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_class_(), ptr, ctx, "action.Test.class");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_method(), ptr, ctx, "action.Test.method");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Test::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string assembly = 1;
  if (this->assembly().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assembly().data(), static_cast<int>(this->_internal_assembly().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Test.assembly");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_assembly(), target);
  }

  // string class = 2;
  if (this->class_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_().data(), static_cast<int>(this->_internal_class_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Test.class");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_class_(), target);
  }

  // string method = 3;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Test.method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Test)
  return target;
}

size_t Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Test)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string assembly = 1;
  if (this->assembly().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assembly());
  }

  // string class = 2;
  if (this->class_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_());
  }

  // string method = 3;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.Test)
  GOOGLE_DCHECK_NE(&from, this);
  const Test* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Test>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.Test)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.Test)
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.assembly().size() > 0) {

    assembly_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assembly_);
  }
  if (from.class_().size() > 0) {

    class__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class__);
  }
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
}

void Test::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  return true;
}

void Test::InternalSwap(Test* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  assembly_.Swap(&other->assembly_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  class__.Swap(&other->class__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Test::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tests::InitAsDefaultInstance() {
}
class Tests::_Internal {
 public:
};

Tests::Tests()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.Tests)
}
Tests::Tests(const Tests& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tests_(from.tests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:action.Tests)
}

void Tests::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tests_action_2eproto.base);
}

Tests::~Tests() {
  // @@protoc_insertion_point(destructor:action.Tests)
  SharedDtor();
}

void Tests::SharedDtor() {
}

void Tests::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tests& Tests::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tests_action_2eproto.base);
  return *internal_default_instance();
}


void Tests::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Tests)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tests_.Clear();
  _internal_metadata_.Clear();
}

const char* Tests::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .action.Test tests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tests::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Tests)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .action.Test tests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tests_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_tests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Tests)
  return target;
}

size_t Tests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Tests)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .action.Test tests = 1;
  total_size += 1UL * this->_internal_tests_size();
  for (const auto& msg : this->tests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tests::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.Tests)
  GOOGLE_DCHECK_NE(&from, this);
  const Tests* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tests>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.Tests)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.Tests)
    MergeFrom(*source);
  }
}

void Tests::MergeFrom(const Tests& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Tests)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tests_.MergeFrom(from.tests_);
}

void Tests::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.Tests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tests::CopyFrom(const Tests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Tests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tests::IsInitialized() const {
  return true;
}

void Tests::InternalSwap(Tests* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tests_.InternalSwap(&other->tests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tests::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::action::_Response_default_instance_.visible_ = false;
  ::action::_Response_default_instance_.data_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::action::_Response_default_instance_.value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::action::_Response_default_instance_.screenshot_ = const_cast< ::action::Screenshot*>(
      ::action::Screenshot::internal_default_instance());
  ::action::_Response_default_instance_.connect_ = const_cast< ::action::Connect*>(
      ::action::Connect::internal_default_instance());
  ::action::_Response_default_instance_.tests_ = const_cast< ::action::Tests*>(
      ::action::Tests::internal_default_instance());
}
class Response::_Internal {
 public:
  static const ::action::Screenshot& screenshot(const Response* msg);
  static const ::action::Connect& connect(const Response* msg);
  static const ::action::Tests& tests(const Response* msg);
};

const ::action::Screenshot&
Response::_Internal::screenshot(const Response* msg) {
  return *msg->payload_.screenshot_;
}
const ::action::Connect&
Response::_Internal::connect(const Response* msg) {
  return *msg->payload_.connect_;
}
const ::action::Tests&
Response::_Internal::tests(const Response* msg) {
  return *msg->payload_.tests_;
}
void Response::set_allocated_screenshot(::action::Screenshot* screenshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (screenshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screenshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screenshot, submessage_arena);
    }
    set_has_screenshot();
    payload_.screenshot_ = screenshot;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Response.screenshot)
}
void Response::set_allocated_connect(::action::Connect* connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    payload_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Response.connect)
}
void Response::set_allocated_tests(::action::Tests* tests) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (tests) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tests = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tests, submessage_arena);
    }
    set_has_tests();
    payload_.tests_ = tests;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Response.tests)
}
Response::Response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actionid().empty()) {
    actionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actionid_);
  }
  ::memcpy(&actiontype_, &from.actiontype_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&actiontype_)) + sizeof(success_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kVisible: {
      _internal_set_visible(from._internal_visible());
      break;
    }
    case kData: {
      _internal_set_data(from._internal_data());
      break;
    }
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kScreenshot: {
      _internal_mutable_screenshot()->::action::Screenshot::MergeFrom(from._internal_screenshot());
      break;
    }
    case kConnect: {
      _internal_mutable_connect()->::action::Connect::MergeFrom(from._internal_connect());
      break;
    }
    case kTests: {
      _internal_mutable_tests()->::action::Tests::MergeFrom(from._internal_tests());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:action.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_action_2eproto.base);
  actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&actiontype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&actiontype_)) + sizeof(success_));
  clear_has_payload();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:action.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  actionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_action_2eproto.base);
  return *internal_default_instance();
}


void Response::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:action.Response)
  switch (payload_case()) {
    case kVisible: {
      // No need to clear
      break;
    }
    case kData: {
      payload_.data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kValue: {
      payload_.value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kScreenshot: {
      delete payload_.screenshot_;
      break;
    }
    case kConnect: {
      delete payload_.connect_;
      break;
    }
    case kTests: {
      delete payload_.tests_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&actiontype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&actiontype_)) + sizeof(success_));
  clear_payload();
  _internal_metadata_.Clear();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string actionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_actionid(), ptr, ctx, "action.Response.actionID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.ActionType actionType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_actiontype(static_cast<::action::ActionType>(val));
        } else goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool visible = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_visible(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_value(), ptr, ctx, "action.Response.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.Screenshot screenshot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_screenshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.Connect connect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .action.Tests tests = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tests(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string actionID = 1;
  if (this->actionid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actionid().data(), static_cast<int>(this->_internal_actionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Response.actionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_actionid(), target);
  }

  // .action.ActionType actionType = 2;
  if (this->actiontype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_actiontype(), target);
  }

  // bool success = 3;
  if (this->success() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // bool visible = 4;
  if (_internal_has_visible()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_visible(), target);
  }

  // bytes data = 5;
  if (_internal_has_data()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // string value = 6;
  if (_internal_has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Response.value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value(), target);
  }

  // .action.Screenshot screenshot = 7;
  if (_internal_has_screenshot()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::screenshot(this), target, stream);
  }

  // .action.Connect connect = 8;
  if (_internal_has_connect()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::connect(this), target, stream);
  }

  // .action.Tests tests = 9;
  if (_internal_has_tests()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::tests(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actionID = 1;
  if (this->actionid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actionid());
  }

  // .action.ActionType actionType = 2;
  if (this->actiontype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actiontype());
  }

  // bool success = 3;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  switch (payload_case()) {
    // bool visible = 4;
    case kVisible: {
      total_size += 1 + 1;
      break;
    }
    // bytes data = 5;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
      break;
    }
    // string value = 6;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
      break;
    }
    // .action.Screenshot screenshot = 7;
    case kScreenshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.screenshot_);
      break;
    }
    // .action.Connect connect = 8;
    case kConnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.connect_);
      break;
    }
    // .action.Tests tests = 9;
    case kTests: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.tests_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actionid().size() > 0) {

    actionid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actionid_);
  }
  if (from.actiontype() != 0) {
    _internal_set_actiontype(from._internal_actiontype());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  switch (from.payload_case()) {
    case kVisible: {
      _internal_set_visible(from._internal_visible());
      break;
    }
    case kData: {
      _internal_set_data(from._internal_data());
      break;
    }
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kScreenshot: {
      _internal_mutable_screenshot()->::action::Screenshot::MergeFrom(from._internal_screenshot());
      break;
    }
    case kConnect: {
      _internal_mutable_connect()->::action::Connect::MergeFrom(from._internal_connect());
      break;
    }
    case kTests: {
      _internal_mutable_tests()->::action::Tests::MergeFrom(from._internal_tests());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  actionid_.Swap(&other->actionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(actiontype_, other->actiontype_);
  swap(success_, other->success_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace action
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::action::Device* Arena::CreateMaybeMessage< ::action::Device >(Arena* arena) {
  return Arena::CreateInternal< ::action::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::action::DeviceRequest* Arena::CreateMaybeMessage< ::action::DeviceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::action::DeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::action::DeviceResponse* Arena::CreateMaybeMessage< ::action::DeviceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::action::DeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::action::InteractionRequest* Arena::CreateMaybeMessage< ::action::InteractionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::action::InteractionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::action::InteractionResponse* Arena::CreateMaybeMessage< ::action::InteractionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::action::InteractionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::action::SetAttr* Arena::CreateMaybeMessage< ::action::SetAttr >(Arena* arena) {
  return Arena::CreateInternal< ::action::SetAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::action::GetAttr* Arena::CreateMaybeMessage< ::action::GetAttr >(Arena* arena) {
  return Arena::CreateInternal< ::action::GetAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::action::MoveOffset* Arena::CreateMaybeMessage< ::action::MoveOffset >(Arena* arena) {
  return Arena::CreateInternal< ::action::MoveOffset >(arena);
}
template<> PROTOBUF_NOINLINE ::action::MoveElement* Arena::CreateMaybeMessage< ::action::MoveElement >(Arena* arena) {
  return Arena::CreateInternal< ::action::MoveElement >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Touch* Arena::CreateMaybeMessage< ::action::Touch >(Arena* arena) {
  return Arena::CreateInternal< ::action::Touch >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Request* Arena::CreateMaybeMessage< ::action::Request >(Arena* arena) {
  return Arena::CreateInternal< ::action::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Connect* Arena::CreateMaybeMessage< ::action::Connect >(Arena* arena) {
  return Arena::CreateInternal< ::action::Connect >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Screenshot* Arena::CreateMaybeMessage< ::action::Screenshot >(Arena* arena) {
  return Arena::CreateInternal< ::action::Screenshot >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Test* Arena::CreateMaybeMessage< ::action::Test >(Arena* arena) {
  return Arena::CreateInternal< ::action::Test >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Tests* Arena::CreateMaybeMessage< ::action::Tests >(Arena* arena) {
  return Arena::CreateInternal< ::action::Tests >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Response* Arena::CreateMaybeMessage< ::action::Response >(Arena* arena) {
  return Arena::CreateInternal< ::action::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
