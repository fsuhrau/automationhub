// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto

#include "action.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace action {
constexpr Device::Device(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : manager_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operationsystem_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , supportedarchitectures_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceDefaultTypeInternal {
  constexpr DeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceDefaultTypeInternal _Device_default_instance_;
constexpr DeviceRequest::DeviceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DeviceRequestDefaultTypeInternal {
  constexpr DeviceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceRequestDefaultTypeInternal() {}
  union {
    DeviceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceRequestDefaultTypeInternal _DeviceRequest_default_instance_;
constexpr DeviceResponse::DeviceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devices_(){}
struct DeviceResponseDefaultTypeInternal {
  constexpr DeviceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceResponseDefaultTypeInternal() {}
  union {
    DeviceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceResponseDefaultTypeInternal _DeviceResponse_default_instance_;
constexpr InteractionRequest::InteractionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct InteractionRequestDefaultTypeInternal {
  constexpr InteractionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InteractionRequestDefaultTypeInternal() {}
  union {
    InteractionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InteractionRequestDefaultTypeInternal _InteractionRequest_default_instance_;
constexpr InteractionResponse::InteractionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct InteractionResponseDefaultTypeInternal {
  constexpr InteractionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InteractionResponseDefaultTypeInternal() {}
  union {
    InteractionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InteractionResponseDefaultTypeInternal _InteractionResponse_default_instance_;
constexpr SetAttr::SetAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , val_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetAttrDefaultTypeInternal {
  constexpr SetAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetAttrDefaultTypeInternal() {}
  union {
    SetAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetAttrDefaultTypeInternal _SetAttr_default_instance_;
constexpr GetAttr::GetAttr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetAttrDefaultTypeInternal {
  constexpr GetAttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetAttrDefaultTypeInternal() {}
  union {
    GetAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetAttrDefaultTypeInternal _GetAttr_default_instance_;
constexpr MoveOffset::MoveOffset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(int64_t{0})
  , to_(int64_t{0}){}
struct MoveOffsetDefaultTypeInternal {
  constexpr MoveOffsetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveOffsetDefaultTypeInternal() {}
  union {
    MoveOffset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveOffsetDefaultTypeInternal _MoveOffset_default_instance_;
constexpr MoveElement::MoveElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MoveElementDefaultTypeInternal {
  constexpr MoveElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveElementDefaultTypeInternal() {}
  union {
    MoveElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveElementDefaultTypeInternal _MoveElement_default_instance_;
constexpr Touch::Touch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xoffset_(int64_t{0})
  , yoffset_(int64_t{0}){}
struct TouchDefaultTypeInternal {
  constexpr TouchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TouchDefaultTypeInternal() {}
  union {
    Touch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TouchDefaultTypeInternal _Touch_default_instance_;
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actiontype_(0)

  , _oneof_case_{}{}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr Connect::Connect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : customerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , apptype_(0)
{}
struct ConnectDefaultTypeInternal {
  constexpr ConnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectDefaultTypeInternal() {}
  union {
    Connect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectDefaultTypeInternal _Connect_default_instance_;
constexpr Screenshot::Screenshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sceengraph_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , screenshot_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contenttype_(0)
{}
struct ScreenshotDefaultTypeInternal {
  constexpr ScreenshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScreenshotDefaultTypeInternal() {}
  union {
    Screenshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScreenshotDefaultTypeInternal _Screenshot_default_instance_;
constexpr Test_ParameterEntry_DoNotUse::Test_ParameterEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Test_ParameterEntry_DoNotUseDefaultTypeInternal {
  constexpr Test_ParameterEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Test_ParameterEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Test_ParameterEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Test_ParameterEntry_DoNotUseDefaultTypeInternal _Test_ParameterEntry_DoNotUse_default_instance_;
constexpr Test::Test(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameter_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , categories_()
  , assembly_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , class__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , method_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TestDefaultTypeInternal {
  constexpr TestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestDefaultTypeInternal() {}
  union {
    Test _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestDefaultTypeInternal _Test_default_instance_;
constexpr Tests::Tests(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tests_(){}
struct TestsDefaultTypeInternal {
  constexpr TestsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestsDefaultTypeInternal() {}
  union {
    Tests _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestsDefaultTypeInternal _Tests_default_instance_;
constexpr LogData::LogData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , level_(0)
{}
struct LogDataDefaultTypeInternal {
  constexpr LogDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogDataDefaultTypeInternal() {}
  union {
    LogData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogDataDefaultTypeInternal _LogData_default_instance_;
constexpr TestDetails::TestDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : categories_()
  , timeout_(0){}
struct TestDetailsDefaultTypeInternal {
  constexpr TestDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TestDetailsDefaultTypeInternal() {}
  union {
    TestDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TestDetailsDefaultTypeInternal _TestDetails_default_instance_;
constexpr PerformanceData::PerformanceData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : checkpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpu_(0)
  , memory_(0)
  , fps_(0){}
struct PerformanceDataDefaultTypeInternal {
  constexpr PerformanceDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PerformanceDataDefaultTypeInternal() {}
  union {
    PerformanceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PerformanceDataDefaultTypeInternal _PerformanceData_default_instance_;
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actiontype_(0)

  , success_(false)
  , _oneof_case_{}{}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace action
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_action_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_action_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_action_2eproto = nullptr;

const uint32_t TableStruct_action_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::Device, manager_),
  PROTOBUF_FIELD_OFFSET(::action::Device, deviceid_),
  PROTOBUF_FIELD_OFFSET(::action::Device, name_),
  PROTOBUF_FIELD_OFFSET(::action::Device, operationsystem_),
  PROTOBUF_FIELD_OFFSET(::action::Device, supportedarchitectures_),
  PROTOBUF_FIELD_OFFSET(::action::Device, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::DeviceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::DeviceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::DeviceResponse, devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::InteractionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::InteractionRequest, deviceid_),
  PROTOBUF_FIELD_OFFSET(::action::InteractionRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::InteractionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::SetAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::SetAttr, id_),
  PROTOBUF_FIELD_OFFSET(::action::SetAttr, attr_),
  PROTOBUF_FIELD_OFFSET(::action::SetAttr, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::GetAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::GetAttr, id_),
  PROTOBUF_FIELD_OFFSET(::action::GetAttr, attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::MoveOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::MoveOffset, from_),
  PROTOBUF_FIELD_OFFSET(::action::MoveOffset, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::MoveElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::MoveElement, from_),
  PROTOBUF_FIELD_OFFSET(::action::MoveElement, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Touch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::Touch, id_),
  PROTOBUF_FIELD_OFFSET(::action::Touch, xoffset_),
  PROTOBUF_FIELD_OFFSET(::action::Touch, yoffset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::action::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::Request, actionid_),
  PROTOBUF_FIELD_OFFSET(::action::Request, actiontype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::action::Request, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::Connect, customerid_),
  PROTOBUF_FIELD_OFFSET(::action::Connect, appid_),
  PROTOBUF_FIELD_OFFSET(::action::Connect, apptype_),
  PROTOBUF_FIELD_OFFSET(::action::Connect, deviceid_),
  PROTOBUF_FIELD_OFFSET(::action::Connect, sessionid_),
  PROTOBUF_FIELD_OFFSET(::action::Connect, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Screenshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::Screenshot, sceengraph_),
  PROTOBUF_FIELD_OFFSET(::action::Screenshot, screenshot_),
  PROTOBUF_FIELD_OFFSET(::action::Screenshot, contenttype_),
  PROTOBUF_FIELD_OFFSET(::action::Test_ParameterEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action::Test_ParameterEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::Test_ParameterEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::action::Test_ParameterEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::Test, assembly_),
  PROTOBUF_FIELD_OFFSET(::action::Test, class__),
  PROTOBUF_FIELD_OFFSET(::action::Test, method_),
  PROTOBUF_FIELD_OFFSET(::action::Test, parameter_),
  PROTOBUF_FIELD_OFFSET(::action::Test, categories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Tests, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::Tests, tests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::LogData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::LogData, type_),
  PROTOBUF_FIELD_OFFSET(::action::LogData, level_),
  PROTOBUF_FIELD_OFFSET(::action::LogData, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::TestDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::TestDetails, timeout_),
  PROTOBUF_FIELD_OFFSET(::action::TestDetails, categories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::PerformanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::PerformanceData, checkpoint_),
  PROTOBUF_FIELD_OFFSET(::action::PerformanceData, cpu_),
  PROTOBUF_FIELD_OFFSET(::action::PerformanceData, memory_),
  PROTOBUF_FIELD_OFFSET(::action::PerformanceData, fps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::action::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::action::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::action::Response, actionid_),
  PROTOBUF_FIELD_OFFSET(::action::Response, actiontype_),
  PROTOBUF_FIELD_OFFSET(::action::Response, success_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::action::Response, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::action::Device)},
  { 12, -1, -1, sizeof(::action::DeviceRequest)},
  { 18, -1, -1, sizeof(::action::DeviceResponse)},
  { 25, -1, -1, sizeof(::action::InteractionRequest)},
  { 33, -1, -1, sizeof(::action::InteractionResponse)},
  { 39, -1, -1, sizeof(::action::SetAttr)},
  { 48, -1, -1, sizeof(::action::GetAttr)},
  { 56, -1, -1, sizeof(::action::MoveOffset)},
  { 64, -1, -1, sizeof(::action::MoveElement)},
  { 72, -1, -1, sizeof(::action::Touch)},
  { 81, -1, -1, sizeof(::action::Request)},
  { 98, -1, -1, sizeof(::action::Connect)},
  { 110, -1, -1, sizeof(::action::Screenshot)},
  { 119, 127, -1, sizeof(::action::Test_ParameterEntry_DoNotUse)},
  { 129, -1, -1, sizeof(::action::Test)},
  { 140, -1, -1, sizeof(::action::Tests)},
  { 147, -1, -1, sizeof(::action::LogData)},
  { 156, -1, -1, sizeof(::action::TestDetails)},
  { 164, -1, -1, sizeof(::action::PerformanceData)},
  { 174, -1, -1, sizeof(::action::Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_DeviceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_DeviceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_InteractionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_InteractionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_SetAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_GetAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_MoveOffset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_MoveElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Touch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Connect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Screenshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Test_ParameterEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Test_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Tests_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_LogData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_TestDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_PerformanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::action::_Response_default_instance_),
};

const char descriptor_table_protodef_action_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014action.proto\022\006action\"\202\001\n\006Device\022\017\n\007man"
  "ager\030\001 \001(\t\022\020\n\010deviceId\030\002 \001(\t\022\014\n\004name\030\003 \001"
  "(\t\022\027\n\017OperationSystem\030\004 \001(\t\022\036\n\026Supported"
  "Architectures\030\005 \001(\t\022\016\n\006Status\030\006 \001(\t\"\017\n\rD"
  "eviceRequest\"1\n\016DeviceResponse\022\037\n\007device"
  "s\030\001 \003(\0132\016.action.Device\"S\n\022InteractionRe"
  "quest\022\020\n\010DeviceID\030\001 \001(\t\022+\n\004type\030\002 \001(\0162\035."
  "action.DeviceInteractionType\"\025\n\023Interact"
  "ionResponse\"0\n\007SetAttr\022\n\n\002id\030\001 \001(\t\022\014\n\004at"
  "tr\030\002 \001(\t\022\013\n\003val\030\003 \001(\t\"#\n\007GetAttr\022\n\n\002id\030\001"
  " \001(\t\022\014\n\004attr\030\002 \001(\t\"&\n\nMoveOffset\022\014\n\004from"
  "\030\001 \001(\003\022\n\n\002to\030\002 \001(\003\"\'\n\013MoveElement\022\014\n\004fro"
  "m\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\"5\n\005Touch\022\n\n\002id\030\001 \001(\t"
  "\022\017\n\007xoffset\030\002 \001(\003\022\017\n\007yoffset\030\003 \001(\003\"\310\002\n\007R"
  "equest\022\020\n\010actionID\030\001 \001(\t\022&\n\nactionType\030\002"
  " \001(\0162\022.action.ActionType\022\014\n\002id\030\003 \001(\tH\000\022\016"
  "\n\004data\030\004 \001(\tH\000\022\"\n\007setAttr\030\005 \001(\0132\017.action"
  ".SetAttrH\000\022\"\n\007getAttr\030\006 \001(\0132\017.action.Get"
  "AttrH\000\022(\n\nmoveOffset\030\007 \001(\0132\022.action.Move"
  "OffsetH\000\022\036\n\005touch\030\010 \001(\0132\r.action.TouchH\000"
  "\022*\n\013moveElement\030\t \001(\0132\023.action.MoveEleme"
  "ntH\000\022\034\n\004test\030\n \001(\0132\014.action.TestH\000B\t\n\007pa"
  "yload\"\204\001\n\007Connect\022\022\n\ncustomerId\030\001 \001(\t\022\r\n"
  "\005appID\030\002 \001(\t\022 \n\007appType\030\003 \001(\0162\017.action.A"
  "ppType\022\020\n\010deviceID\030\004 \001(\t\022\021\n\tsessionID\030\005 "
  "\001(\t\022\017\n\007version\030\006 \001(\t\"^\n\nScreenshot\022\022\n\nsc"
  "eengraph\030\001 \001(\014\022\022\n\nscreenshot\030\002 \001(\014\022(\n\013co"
  "ntentType\030\003 \001(\0162\023.action.ContentType\"\255\001\n"
  "\004Test\022\020\n\010assembly\030\001 \001(\t\022\r\n\005class\030\002 \001(\t\022\016"
  "\n\006method\030\003 \001(\t\022.\n\tparameter\030\004 \003(\0132\033.acti"
  "on.Test.ParameterEntry\022\022\n\ncategories\030\005 \003"
  "(\t\0320\n\016ParameterEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\t:\0028\001\"$\n\005Tests\022\033\n\005tests\030\001 \003(\0132\014.a"
  "ction.Test\"Z\n\007LogData\022\035\n\004type\030\001 \001(\0162\017.ac"
  "tion.LogType\022\037\n\005level\030\002 \001(\0162\020.action.Log"
  "Level\022\017\n\007message\030\003 \001(\t\"2\n\013TestDetails\022\017\n"
  "\007timeout\030\001 \001(\005\022\022\n\ncategories\030\002 \003(\t\"O\n\017Pe"
  "rformanceData\022\022\n\ncheckpoint\030\001 \001(\t\022\013\n\003cpu"
  "\030\002 \001(\002\022\016\n\006memory\030\003 \001(\002\022\013\n\003fps\030\004 \001(\002\"\376\002\n\010"
  "Response\022\020\n\010actionID\030\001 \001(\t\022&\n\nactionType"
  "\030\002 \001(\0162\022.action.ActionType\022\017\n\007success\030\003 "
  "\001(\010\022\021\n\007visible\030\004 \001(\010H\000\022\016\n\004data\030\005 \001(\014H\000\022\017"
  "\n\005value\030\006 \001(\tH\000\022(\n\nscreenshot\030\007 \001(\0132\022.ac"
  "tion.ScreenshotH\000\022\"\n\007connect\030\010 \001(\0132\017.act"
  "ion.ConnectH\000\022\036\n\005tests\030\t \001(\0132\r.action.Te"
  "stsH\000\022\036\n\003log\030\n \001(\0132\017.action.LogDataH\000\022*\n"
  "\013testDetails\030\013 \001(\0132\023.action.TestDetailsH"
  "\000\022.\n\013performance\030\014 \001(\0132\027.action.Performa"
  "nceDataH\000B\t\n\007payload*\220\002\n\025DeviceInteracti"
  "onType\022\016\n\nLockDevice\020\000\022\020\n\014UnlockDevice\020\001"
  "\022\022\n\016GetDeviceState\020\002\022\022\n\016IsAppInstalled\020\003"
  "\022\016\n\nInstallApp\020\004\022\020\n\014UninstallApp\020\005\022\014\n\010St"
  "artApp\020\006\022\013\n\007StopApp\020\007\022\022\n\016IsAppConnected\020"
  "\010\022\022\n\016StartRecording\020\t\022\021\n\rStopRecording\020\n"
  "\022\016\n\nHasFeature\020\013\022\022\n\016ExecuteFeature\020\014\022\021\n\r"
  "GetScreenShot\020\r*\327\002\n\nActionType\022\n\n\006Custom"
  "\020\000\022\021\n\rGetSceneGraph\020\001\022\026\n\022ElementIsDispla"
  "yed\020\002\022\023\n\017ElementSetValue\020\003\022\023\n\017ElementGet"
  "Value\020\004\022\010\n\004Move\020\005\022\r\n\tTouchDown\020\006\022\r\n\tTouc"
  "hMove\020\007\022\013\n\007TouchUp\020\010\022\017\n\013DragAndDrop\020\t\022\r\n"
  "\tLongTouch\020\n\022\020\n\014ElementTouch\020\013\022\021\n\rGetScr"
  "eenshot\020\014\022\014\n\010GetTests\020\r\022\017\n\013ExecuteTest\020\016"
  "\022\023\n\017ExecutionResult\020\017\022\007\n\003Log\020\020\022\016\n\nUnityR"
  "eset\020\021\022\017\n\013Performance\020\022\022\020\n\014NativeScript\020"
  "\023*[\n\007LogType\022\r\n\tDeviceLog\020\000\022\013\n\007StepLog\020\001"
  "\022\r\n\tStatusLog\020\002\022\021\n\rCheckpointLog\020\003\022\022\n\016Pe"
  "rformanceLog\020\004*F\n\010LogLevel\022\t\n\005Debug\020\000\022\010\n"
  "\004Info\020\001\022\013\n\007Warning\020\002\022\t\n\005Error\020\003\022\r\n\tExcep"
  "tion\020\004*0\n\013ContentType\022\016\n\nFlatbuffer\020\000\022\010\n"
  "\004Json\020\001\022\007\n\003Xml\020\002*\037\n\007AppType\022\t\n\005Cocos\020\000\022\t"
  "\n\005Unity\020\0012\337\001\n\014RemoteDevice\022A\n\nDeviceList"
  "\022\025.action.DeviceRequest\032\026.action.DeviceR"
  "esponse\"\000(\0010\001\022R\n\021DeviceInteraction\022\032.act"
  "ion.InteractionRequest\032\033.action.Interact"
  "ionResponse\"\000(\0010\001\0228\n\rActionExecute\022\017.act"
  "ion.Request\032\020.action.Response\"\000(\0010\001B Z\nh"
  "ub/action\252\002\021Com.AutomationHubb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_action_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_action_2eproto = {
  false, false, 3077, descriptor_table_protodef_action_2eproto, "action.proto", 
  &descriptor_table_action_2eproto_once, nullptr, 0, 20,
  schemas, file_default_instances, TableStruct_action_2eproto::offsets,
  file_level_metadata_action_2eproto, file_level_enum_descriptors_action_2eproto, file_level_service_descriptors_action_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_action_2eproto_getter() {
  return &descriptor_table_action_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_action_2eproto(&descriptor_table_action_2eproto);
namespace action {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceInteractionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_2eproto);
  return file_level_enum_descriptors_action_2eproto[0];
}
bool DeviceInteractionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_2eproto);
  return file_level_enum_descriptors_action_2eproto[1];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_2eproto);
  return file_level_enum_descriptors_action_2eproto[2];
}
bool LogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_2eproto);
  return file_level_enum_descriptors_action_2eproto[3];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_2eproto);
  return file_level_enum_descriptors_action_2eproto[4];
}
bool ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_action_2eproto);
  return file_level_enum_descriptors_action_2eproto[5];
}
bool AppType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  manager_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    manager_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_manager().empty()) {
    manager_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_manager(), 
      GetArenaForAllocation());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  operationsystem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    operationsystem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operationsystem().empty()) {
    operationsystem_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operationsystem(), 
      GetArenaForAllocation());
  }
  supportedarchitectures_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    supportedarchitectures_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_supportedarchitectures().empty()) {
    supportedarchitectures_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_supportedarchitectures(), 
      GetArenaForAllocation());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:action.Device)
}

inline void Device::SharedCtor() {
manager_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  manager_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
operationsystem_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  operationsystem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
supportedarchitectures_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  supportedarchitectures_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:action.Device)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  manager_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operationsystem_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supportedarchitectures_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Device::ArenaDtor(void* object) {
  Device* _this = reinterpret_cast< Device* >(object);
  (void)_this;
}
void Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Device)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manager_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  name_.ClearToEmpty();
  operationsystem_.ClearToEmpty();
  supportedarchitectures_.ClearToEmpty();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string manager = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_manager();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Device.manager"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Device.deviceId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Device.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string OperationSystem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_operationsystem();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Device.OperationSystem"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SupportedArchitectures = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_supportedarchitectures();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Device.SupportedArchitectures"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Device.Status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Device::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Device)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string manager = 1;
  if (!this->_internal_manager().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manager().data(), static_cast<int>(this->_internal_manager().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.manager");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_manager(), target);
  }

  // string deviceId = 2;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.deviceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string OperationSystem = 4;
  if (!this->_internal_operationsystem().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operationsystem().data(), static_cast<int>(this->_internal_operationsystem().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.OperationSystem");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_operationsystem(), target);
  }

  // string SupportedArchitectures = 5;
  if (!this->_internal_supportedarchitectures().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_supportedarchitectures().data(), static_cast<int>(this->_internal_supportedarchitectures().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.SupportedArchitectures");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_supportedarchitectures(), target);
  }

  // string Status = 6;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Device.Status");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Device)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string manager = 1;
  if (!this->_internal_manager().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manager());
  }

  // string deviceId = 2;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string OperationSystem = 4;
  if (!this->_internal_operationsystem().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operationsystem());
  }

  // string SupportedArchitectures = 5;
  if (!this->_internal_supportedarchitectures().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_supportedarchitectures());
  }

  // string Status = 6;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Device::GetClassData() const { return &_class_data_; }

void Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Device *>(to)->MergeFrom(
      static_cast<const Device &>(from));
}


void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Device)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_manager().empty()) {
    _internal_set_manager(from._internal_manager());
  }
  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_operationsystem().empty()) {
    _internal_set_operationsystem(from._internal_operationsystem());
  }
  if (!from._internal_supportedarchitectures().empty()) {
    _internal_set_supportedarchitectures(from._internal_supportedarchitectures());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &manager_, lhs_arena,
      &other->manager_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operationsystem_, lhs_arena,
      &other->operationsystem_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &supportedarchitectures_, lhs_arena,
      &other->supportedarchitectures_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[0]);
}

// ===================================================================

class DeviceRequest::_Internal {
 public:
};

DeviceRequest::DeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:action.DeviceRequest)
}
DeviceRequest::DeviceRequest(const DeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:action.DeviceRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeviceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[1]);
}

// ===================================================================

class DeviceResponse::_Internal {
 public:
};

DeviceResponse::DeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  devices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.DeviceResponse)
}
DeviceResponse::DeviceResponse(const DeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:action.DeviceResponse)
}

inline void DeviceResponse::SharedCtor() {
}

DeviceResponse::~DeviceResponse() {
  // @@protoc_insertion_point(destructor:action.DeviceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceResponse::ArenaDtor(void* object) {
  DeviceResponse* _this = reinterpret_cast< DeviceResponse* >(object);
  (void)_this;
}
void DeviceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:action.DeviceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .action.Device devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.DeviceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .action.Device devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.DeviceResponse)
  return target;
}

size_t DeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.DeviceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .action.Device devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceResponse::GetClassData() const { return &_class_data_; }

void DeviceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceResponse *>(to)->MergeFrom(
      static_cast<const DeviceResponse &>(from));
}


void DeviceResponse::MergeFrom(const DeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.DeviceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceResponse::CopyFrom(const DeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.DeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceResponse::IsInitialized() const {
  return true;
}

void DeviceResponse::InternalSwap(DeviceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[2]);
}

// ===================================================================

class InteractionRequest::_Internal {
 public:
};

InteractionRequest::InteractionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.InteractionRequest)
}
InteractionRequest::InteractionRequest(const InteractionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:action.InteractionRequest)
}

inline void InteractionRequest::SharedCtor() {
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

InteractionRequest::~InteractionRequest() {
  // @@protoc_insertion_point(destructor:action.InteractionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InteractionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InteractionRequest::ArenaDtor(void* object) {
  InteractionRequest* _this = reinterpret_cast< InteractionRequest* >(object);
  (void)_this;
}
void InteractionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InteractionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InteractionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:action.InteractionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceid_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InteractionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string DeviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.InteractionRequest.DeviceID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.DeviceInteractionType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::action::DeviceInteractionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InteractionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.InteractionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string DeviceID = 1;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.InteractionRequest.DeviceID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // .action.DeviceInteractionType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.InteractionRequest)
  return target;
}

size_t InteractionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.InteractionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DeviceID = 1;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // .action.DeviceInteractionType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InteractionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InteractionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InteractionRequest::GetClassData() const { return &_class_data_; }

void InteractionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InteractionRequest *>(to)->MergeFrom(
      static_cast<const InteractionRequest &>(from));
}


void InteractionRequest::MergeFrom(const InteractionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.InteractionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InteractionRequest::CopyFrom(const InteractionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.InteractionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractionRequest::IsInitialized() const {
  return true;
}

void InteractionRequest::InternalSwap(InteractionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InteractionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[3]);
}

// ===================================================================

class InteractionResponse::_Internal {
 public:
};

InteractionResponse::InteractionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:action.InteractionResponse)
}
InteractionResponse::InteractionResponse(const InteractionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:action.InteractionResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InteractionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InteractionResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InteractionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[4]);
}

// ===================================================================

class SetAttr::_Internal {
 public:
};

SetAttr::SetAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.SetAttr)
}
SetAttr::SetAttr(const SetAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attr().empty()) {
    attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attr(), 
      GetArenaForAllocation());
  }
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_val().empty()) {
    val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:action.SetAttr)
}

inline void SetAttr::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetAttr::~SetAttr() {
  // @@protoc_insertion_point(destructor:action.SetAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAttr::ArenaDtor(void* object) {
  SetAttr* _this = reinterpret_cast< SetAttr* >(object);
  (void)_this;
}
void SetAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:action.SetAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  attr_.ClearToEmpty();
  val_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.SetAttr.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_attr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.SetAttr.attr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.SetAttr.val"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.SetAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.SetAttr.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string attr = 2;
  if (!this->_internal_attr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attr().data(), static_cast<int>(this->_internal_attr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.SetAttr.attr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_attr(), target);
  }

  // string val = 3;
  if (!this->_internal_val().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_val().data(), static_cast<int>(this->_internal_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.SetAttr.val");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.SetAttr)
  return target;
}

size_t SetAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.SetAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string attr = 2;
  if (!this->_internal_attr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attr());
  }

  // string val = 3;
  if (!this->_internal_val().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetAttr::GetClassData() const { return &_class_data_; }

void SetAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetAttr *>(to)->MergeFrom(
      static_cast<const SetAttr &>(from));
}


void SetAttr::MergeFrom(const SetAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.SetAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_attr().empty()) {
    _internal_set_attr(from._internal_attr());
  }
  if (!from._internal_val().empty()) {
    _internal_set_val(from._internal_val());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetAttr::CopyFrom(const SetAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.SetAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAttr::IsInitialized() const {
  return true;
}

void SetAttr::InternalSwap(SetAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attr_, lhs_arena,
      &other->attr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &val_, lhs_arena,
      &other->val_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[5]);
}

// ===================================================================

class GetAttr::_Internal {
 public:
};

GetAttr::GetAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.GetAttr)
}
GetAttr::GetAttr(const GetAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attr().empty()) {
    attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attr(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:action.GetAttr)
}

inline void GetAttr::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAttr::~GetAttr() {
  // @@protoc_insertion_point(destructor:action.GetAttr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAttr::ArenaDtor(void* object) {
  GetAttr* _this = reinterpret_cast< GetAttr* >(object);
  (void)_this;
}
void GetAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:action.GetAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  attr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.GetAttr.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_attr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.GetAttr.attr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.GetAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.GetAttr.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string attr = 2;
  if (!this->_internal_attr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attr().data(), static_cast<int>(this->_internal_attr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.GetAttr.attr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_attr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.GetAttr)
  return target;
}

size_t GetAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.GetAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string attr = 2;
  if (!this->_internal_attr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAttr::GetClassData() const { return &_class_data_; }

void GetAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAttr *>(to)->MergeFrom(
      static_cast<const GetAttr &>(from));
}


void GetAttr::MergeFrom(const GetAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.GetAttr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_attr().empty()) {
    _internal_set_attr(from._internal_attr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAttr::CopyFrom(const GetAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.GetAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttr::IsInitialized() const {
  return true;
}

void GetAttr::InternalSwap(GetAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attr_, lhs_arena,
      &other->attr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAttr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[6]);
}

// ===================================================================

class MoveOffset::_Internal {
 public:
};

MoveOffset::MoveOffset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.MoveOffset)
}
MoveOffset::MoveOffset(const MoveOffset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:action.MoveOffset)
}

inline void MoveOffset::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

MoveOffset::~MoveOffset() {
  // @@protoc_insertion_point(destructor:action.MoveOffset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveOffset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveOffset::ArenaDtor(void* object) {
  MoveOffset* _this = reinterpret_cast< MoveOffset* >(object);
  (void)_this;
}
void MoveOffset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveOffset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:action.MoveOffset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveOffset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveOffset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.MoveOffset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_from(), target);
  }

  // int64 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.MoveOffset)
  return target;
}

size_t MoveOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.MoveOffset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_from());
  }

  // int64 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_to());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveOffset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveOffset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveOffset::GetClassData() const { return &_class_data_; }

void MoveOffset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveOffset *>(to)->MergeFrom(
      static_cast<const MoveOffset &>(from));
}


void MoveOffset::MergeFrom(const MoveOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.MoveOffset)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveOffset::CopyFrom(const MoveOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.MoveOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveOffset::IsInitialized() const {
  return true;
}

void MoveOffset::InternalSwap(MoveOffset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveOffset, to_)
      + sizeof(MoveOffset::to_)
      - PROTOBUF_FIELD_OFFSET(MoveOffset, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveOffset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[7]);
}

// ===================================================================

class MoveElement::_Internal {
 public:
};

MoveElement::MoveElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.MoveElement)
}
MoveElement::MoveElement(const MoveElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:action.MoveElement)
}

inline void MoveElement::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MoveElement::~MoveElement() {
  // @@protoc_insertion_point(destructor:action.MoveElement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveElement::ArenaDtor(void* object) {
  MoveElement* _this = reinterpret_cast< MoveElement* >(object);
  (void)_this;
}
void MoveElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveElement::Clear() {
// @@protoc_insertion_point(message_clear_start:action.MoveElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.MoveElement.from"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.MoveElement.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.MoveElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.MoveElement.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.MoveElement.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.MoveElement)
  return target;
}

size_t MoveElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.MoveElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 2;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveElement::GetClassData() const { return &_class_data_; }

void MoveElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveElement *>(to)->MergeFrom(
      static_cast<const MoveElement &>(from));
}


void MoveElement::MergeFrom(const MoveElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.MoveElement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveElement::CopyFrom(const MoveElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.MoveElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveElement::IsInitialized() const {
  return true;
}

void MoveElement::InternalSwap(MoveElement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[8]);
}

// ===================================================================

class Touch::_Internal {
 public:
};

Touch::Touch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.Touch)
}
Touch::Touch(const Touch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&xoffset_, &from.xoffset_,
    static_cast<size_t>(reinterpret_cast<char*>(&yoffset_) -
    reinterpret_cast<char*>(&xoffset_)) + sizeof(yoffset_));
  // @@protoc_insertion_point(copy_constructor:action.Touch)
}

inline void Touch::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&xoffset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yoffset_) -
    reinterpret_cast<char*>(&xoffset_)) + sizeof(yoffset_));
}

Touch::~Touch() {
  // @@protoc_insertion_point(destructor:action.Touch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Touch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Touch::ArenaDtor(void* object) {
  Touch* _this = reinterpret_cast< Touch* >(object);
  (void)_this;
}
void Touch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Touch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Touch::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Touch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  ::memset(&xoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yoffset_) -
      reinterpret_cast<char*>(&xoffset_)) + sizeof(yoffset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Touch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Touch.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 xoffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          xoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 yoffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          yoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Touch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Touch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Touch.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 xoffset = 2;
  if (this->_internal_xoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_xoffset(), target);
  }

  // int64 yoffset = 3;
  if (this->_internal_yoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_yoffset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Touch)
  return target;
}

size_t Touch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Touch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int64 xoffset = 2;
  if (this->_internal_xoffset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_xoffset());
  }

  // int64 yoffset = 3;
  if (this->_internal_yoffset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_yoffset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Touch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Touch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Touch::GetClassData() const { return &_class_data_; }

void Touch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Touch *>(to)->MergeFrom(
      static_cast<const Touch &>(from));
}


void Touch::MergeFrom(const Touch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Touch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_xoffset() != 0) {
    _internal_set_xoffset(from._internal_xoffset());
  }
  if (from._internal_yoffset() != 0) {
    _internal_set_yoffset(from._internal_yoffset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Touch::CopyFrom(const Touch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Touch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Touch::IsInitialized() const {
  return true;
}

void Touch::InternalSwap(Touch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Touch, yoffset_)
      + sizeof(Touch::yoffset_)
      - PROTOBUF_FIELD_OFFSET(Touch, xoffset_)>(
          reinterpret_cast<char*>(&xoffset_),
          reinterpret_cast<char*>(&other->xoffset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Touch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[9]);
}

// ===================================================================

class Request::_Internal {
 public:
  static const ::action::SetAttr& setattr(const Request* msg);
  static const ::action::GetAttr& getattr(const Request* msg);
  static const ::action::MoveOffset& moveoffset(const Request* msg);
  static const ::action::Touch& touch(const Request* msg);
  static const ::action::MoveElement& moveelement(const Request* msg);
  static const ::action::Test& test(const Request* msg);
};

const ::action::SetAttr&
Request::_Internal::setattr(const Request* msg) {
  return *msg->payload_.setattr_;
}
const ::action::GetAttr&
Request::_Internal::getattr(const Request* msg) {
  return *msg->payload_.getattr_;
}
const ::action::MoveOffset&
Request::_Internal::moveoffset(const Request* msg) {
  return *msg->payload_.moveoffset_;
}
const ::action::Touch&
Request::_Internal::touch(const Request* msg) {
  return *msg->payload_.touch_;
}
const ::action::MoveElement&
Request::_Internal::moveelement(const Request* msg) {
  return *msg->payload_.moveelement_;
}
const ::action::Test&
Request::_Internal::test(const Request* msg) {
  return *msg->payload_.test_;
}
void Request::set_allocated_setattr(::action::SetAttr* setattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (setattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::SetAttr>::GetOwningArena(setattr);
    if (message_arena != submessage_arena) {
      setattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setattr, submessage_arena);
    }
    set_has_setattr();
    payload_.setattr_ = setattr;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.setAttr)
}
void Request::set_allocated_getattr(::action::GetAttr* getattr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (getattr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::GetAttr>::GetOwningArena(getattr);
    if (message_arena != submessage_arena) {
      getattr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getattr, submessage_arena);
    }
    set_has_getattr();
    payload_.getattr_ = getattr;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.getAttr)
}
void Request::set_allocated_moveoffset(::action::MoveOffset* moveoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (moveoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::MoveOffset>::GetOwningArena(moveoffset);
    if (message_arena != submessage_arena) {
      moveoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moveoffset, submessage_arena);
    }
    set_has_moveoffset();
    payload_.moveoffset_ = moveoffset;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.moveOffset)
}
void Request::set_allocated_touch(::action::Touch* touch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (touch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::Touch>::GetOwningArena(touch);
    if (message_arena != submessage_arena) {
      touch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch, submessage_arena);
    }
    set_has_touch();
    payload_.touch_ = touch;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.touch)
}
void Request::set_allocated_moveelement(::action::MoveElement* moveelement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (moveelement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::MoveElement>::GetOwningArena(moveelement);
    if (message_arena != submessage_arena) {
      moveelement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, moveelement, submessage_arena);
    }
    set_has_moveelement();
    payload_.moveelement_ = moveelement;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.moveElement)
}
void Request::set_allocated_test(::action::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::Test>::GetOwningArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    set_has_test();
    payload_.test_ = test;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Request.test)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    actionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actionid().empty()) {
    actionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actionid(), 
      GetArenaForAllocation());
  }
  actiontype_ = from.actiontype_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kData: {
      _internal_set_data(from._internal_data());
      break;
    }
    case kSetAttr: {
      _internal_mutable_setattr()->::action::SetAttr::MergeFrom(from._internal_setattr());
      break;
    }
    case kGetAttr: {
      _internal_mutable_getattr()->::action::GetAttr::MergeFrom(from._internal_getattr());
      break;
    }
    case kMoveOffset: {
      _internal_mutable_moveoffset()->::action::MoveOffset::MergeFrom(from._internal_moveoffset());
      break;
    }
    case kTouch: {
      _internal_mutable_touch()->::action::Touch::MergeFrom(from._internal_touch());
      break;
    }
    case kMoveElement: {
      _internal_mutable_moveelement()->::action::MoveElement::MergeFrom(from._internal_moveelement());
      break;
    }
    case kTest: {
      _internal_mutable_test()->::action::Test::MergeFrom(from._internal_test());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:action.Request)
}

inline void Request::SharedCtor() {
actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  actionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
actiontype_ = 0;
clear_has_payload();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:action.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  actionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:action.Request)
  switch (payload_case()) {
    case kId: {
      payload_.id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kData: {
      payload_.data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kSetAttr: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.setattr_;
      }
      break;
    }
    case kGetAttr: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.getattr_;
      }
      break;
    }
    case kMoveOffset: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.moveoffset_;
      }
      break;
    }
    case kTouch: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.touch_;
      }
      break;
    }
    case kMoveElement: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.moveelement_;
      }
      break;
    }
    case kTest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.test_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionid_.ClearToEmpty();
  actiontype_ = 0;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string actionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_actionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Request.actionID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.ActionType actionType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_actiontype(static_cast<::action::ActionType>(val));
        } else
          goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Request.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Request.data"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.SetAttr setAttr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_setattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.GetAttr getAttr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_getattr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.MoveOffset moveOffset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_moveoffset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.Touch touch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.MoveElement moveElement = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_moveelement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.Test test = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string actionID = 1;
  if (!this->_internal_actionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actionid().data(), static_cast<int>(this->_internal_actionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Request.actionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_actionid(), target);
  }

  // .action.ActionType actionType = 2;
  if (this->_internal_actiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_actiontype(), target);
  }

  // string id = 3;
  if (_internal_has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Request.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // string data = 4;
  if (_internal_has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Request.data");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_data(), target);
  }

  // .action.SetAttr setAttr = 5;
  if (_internal_has_setattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::setattr(this), target, stream);
  }

  // .action.GetAttr getAttr = 6;
  if (_internal_has_getattr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::getattr(this), target, stream);
  }

  // .action.MoveOffset moveOffset = 7;
  if (_internal_has_moveoffset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::moveoffset(this), target, stream);
  }

  // .action.Touch touch = 8;
  if (_internal_has_touch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::touch(this), target, stream);
  }

  // .action.MoveElement moveElement = 9;
  if (_internal_has_moveelement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::moveelement(this), target, stream);
  }

  // .action.Test test = 10;
  if (_internal_has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actionID = 1;
  if (!this->_internal_actionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actionid());
  }

  // .action.ActionType actionType = 2;
  if (this->_internal_actiontype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actiontype());
  }

  switch (payload_case()) {
    // string id = 3;
    case kId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
      break;
    }
    // string data = 4;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data());
      break;
    }
    // .action.SetAttr setAttr = 5;
    case kSetAttr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.setattr_);
      break;
    }
    // .action.GetAttr getAttr = 6;
    case kGetAttr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.getattr_);
      break;
    }
    // .action.MoveOffset moveOffset = 7;
    case kMoveOffset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.moveoffset_);
      break;
    }
    // .action.Touch touch = 8;
    case kTouch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.touch_);
      break;
    }
    // .action.MoveElement moveElement = 9;
    case kMoveElement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.moveelement_);
      break;
    }
    // .action.Test test = 10;
    case kTest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.test_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actionid().empty()) {
    _internal_set_actionid(from._internal_actionid());
  }
  if (from._internal_actiontype() != 0) {
    _internal_set_actiontype(from._internal_actiontype());
  }
  switch (from.payload_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kData: {
      _internal_set_data(from._internal_data());
      break;
    }
    case kSetAttr: {
      _internal_mutable_setattr()->::action::SetAttr::MergeFrom(from._internal_setattr());
      break;
    }
    case kGetAttr: {
      _internal_mutable_getattr()->::action::GetAttr::MergeFrom(from._internal_getattr());
      break;
    }
    case kMoveOffset: {
      _internal_mutable_moveoffset()->::action::MoveOffset::MergeFrom(from._internal_moveoffset());
      break;
    }
    case kTouch: {
      _internal_mutable_touch()->::action::Touch::MergeFrom(from._internal_touch());
      break;
    }
    case kMoveElement: {
      _internal_mutable_moveelement()->::action::MoveElement::MergeFrom(from._internal_moveelement());
      break;
    }
    case kTest: {
      _internal_mutable_test()->::action::Test::MergeFrom(from._internal_test());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actionid_, lhs_arena,
      &other->actionid_, rhs_arena
  );
  swap(actiontype_, other->actiontype_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[10]);
}

// ===================================================================

class Connect::_Internal {
 public:
};

Connect::Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.Connect)
}
Connect::Connect(const Connect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    customerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customerid().empty()) {
    customerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customerid(), 
      GetArenaForAllocation());
  }
  appid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    appid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appid().empty()) {
    appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appid(), 
      GetArenaForAllocation());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  apptype_ = from.apptype_;
  // @@protoc_insertion_point(copy_constructor:action.Connect)
}

inline void Connect::SharedCtor() {
customerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  customerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
appid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  appid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
apptype_ = 0;
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:action.Connect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Connect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  customerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Connect::ArenaDtor(void* object) {
  Connect* _this = reinterpret_cast< Connect* >(object);
  (void)_this;
}
void Connect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Connect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Connect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customerid_.ClearToEmpty();
  appid_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  sessionid_.ClearToEmpty();
  version_.ClearToEmpty();
  apptype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string customerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_customerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Connect.customerId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string appID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_appid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Connect.appID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.AppType appType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_apptype(static_cast<::action::AppType>(val));
        } else
          goto handle_unusual;
        continue;
      // string deviceID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Connect.deviceID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sessionID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Connect.sessionID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Connect.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Connect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Connect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string customerId = 1;
  if (!this->_internal_customerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customerid().data(), static_cast<int>(this->_internal_customerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Connect.customerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customerid(), target);
  }

  // string appID = 2;
  if (!this->_internal_appid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Connect.appID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_appid(), target);
  }

  // .action.AppType appType = 3;
  if (this->_internal_apptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_apptype(), target);
  }

  // string deviceID = 4;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Connect.deviceID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_deviceid(), target);
  }

  // string sessionID = 5;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Connect.sessionID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sessionid(), target);
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Connect.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Connect)
  return target;
}

size_t Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Connect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customerId = 1;
  if (!this->_internal_customerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customerid());
  }

  // string appID = 2;
  if (!this->_internal_appid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string deviceID = 4;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string sessionID = 5;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .action.AppType appType = 3;
  if (this->_internal_apptype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_apptype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Connect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Connect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Connect::GetClassData() const { return &_class_data_; }

void Connect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Connect *>(to)->MergeFrom(
      static_cast<const Connect &>(from));
}


void Connect::MergeFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_customerid().empty()) {
    _internal_set_customerid(from._internal_customerid());
  }
  if (!from._internal_appid().empty()) {
    _internal_set_appid(from._internal_appid());
  }
  if (!from._internal_deviceid().empty()) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_sessionid().empty()) {
    _internal_set_sessionid(from._internal_sessionid());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_apptype() != 0) {
    _internal_set_apptype(from._internal_apptype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Connect::CopyFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {
  return true;
}

void Connect::InternalSwap(Connect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &customerid_, lhs_arena,
      &other->customerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &appid_, lhs_arena,
      &other->appid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sessionid_, lhs_arena,
      &other->sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  swap(apptype_, other->apptype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Connect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[11]);
}

// ===================================================================

class Screenshot::_Internal {
 public:
};

Screenshot::Screenshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.Screenshot)
}
Screenshot::Screenshot(const Screenshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sceengraph_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sceengraph_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sceengraph().empty()) {
    sceengraph_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sceengraph(), 
      GetArenaForAllocation());
  }
  screenshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    screenshot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_screenshot().empty()) {
    screenshot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_screenshot(), 
      GetArenaForAllocation());
  }
  contenttype_ = from.contenttype_;
  // @@protoc_insertion_point(copy_constructor:action.Screenshot)
}

inline void Screenshot::SharedCtor() {
sceengraph_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sceengraph_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
screenshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  screenshot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contenttype_ = 0;
}

Screenshot::~Screenshot() {
  // @@protoc_insertion_point(destructor:action.Screenshot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Screenshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sceengraph_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  screenshot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Screenshot::ArenaDtor(void* object) {
  Screenshot* _this = reinterpret_cast< Screenshot* >(object);
  (void)_this;
}
void Screenshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Screenshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Screenshot::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Screenshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceengraph_.ClearToEmpty();
  screenshot_.ClearToEmpty();
  contenttype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Screenshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sceengraph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sceengraph();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes screenshot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_screenshot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.ContentType contentType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_contenttype(static_cast<::action::ContentType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Screenshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Screenshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sceengraph = 1;
  if (!this->_internal_sceengraph().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sceengraph(), target);
  }

  // bytes screenshot = 2;
  if (!this->_internal_screenshot().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_screenshot(), target);
  }

  // .action.ContentType contentType = 3;
  if (this->_internal_contenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_contenttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Screenshot)
  return target;
}

size_t Screenshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Screenshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sceengraph = 1;
  if (!this->_internal_sceengraph().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sceengraph());
  }

  // bytes screenshot = 2;
  if (!this->_internal_screenshot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_screenshot());
  }

  // .action.ContentType contentType = 3;
  if (this->_internal_contenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contenttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Screenshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Screenshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Screenshot::GetClassData() const { return &_class_data_; }

void Screenshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Screenshot *>(to)->MergeFrom(
      static_cast<const Screenshot &>(from));
}


void Screenshot::MergeFrom(const Screenshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Screenshot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sceengraph().empty()) {
    _internal_set_sceengraph(from._internal_sceengraph());
  }
  if (!from._internal_screenshot().empty()) {
    _internal_set_screenshot(from._internal_screenshot());
  }
  if (from._internal_contenttype() != 0) {
    _internal_set_contenttype(from._internal_contenttype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Screenshot::CopyFrom(const Screenshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Screenshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screenshot::IsInitialized() const {
  return true;
}

void Screenshot::InternalSwap(Screenshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sceengraph_, lhs_arena,
      &other->sceengraph_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &screenshot_, lhs_arena,
      &other->screenshot_, rhs_arena
  );
  swap(contenttype_, other->contenttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Screenshot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[12]);
}

// ===================================================================

Test_ParameterEntry_DoNotUse::Test_ParameterEntry_DoNotUse() {}
Test_ParameterEntry_DoNotUse::Test_ParameterEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Test_ParameterEntry_DoNotUse::MergeFrom(const Test_ParameterEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Test_ParameterEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[13]);
}

// ===================================================================

class Test::_Internal {
 public:
};

Test::Test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parameter_(arena),
  categories_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.Test)
}
Test::Test(const Test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameter_.MergeFrom(from.parameter_);
  assembly_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    assembly_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_assembly().empty()) {
    assembly_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assembly(), 
      GetArenaForAllocation());
  }
  class__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_().empty()) {
    class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_(), 
      GetArenaForAllocation());
  }
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:action.Test)
}

inline void Test::SharedCtor() {
assembly_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  assembly_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
class__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:action.Test)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Test::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  assembly_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Test::ArenaDtor(void* object) {
  Test* _this = reinterpret_cast< Test* >(object);
  (void)_this;
  _this->parameter_. ~MapField();
}
inline void Test::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Test::ArenaDtor);
  }
}
void Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Test::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Test)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameter_.Clear();
  categories_.Clear();
  assembly_.ClearToEmpty();
  class__.ClearToEmpty();
  method_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string assembly = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_assembly();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Test.assembly"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_class_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Test.class"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Test.method"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameter_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string categories = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_categories();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Test.categories"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Test::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Test)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string assembly = 1;
  if (!this->_internal_assembly().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assembly().data(), static_cast<int>(this->_internal_assembly().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Test.assembly");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_assembly(), target);
  }

  // string class = 2;
  if (!this->_internal_class_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_().data(), static_cast<int>(this->_internal_class_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Test.class");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_class_(), target);
  }

  // string method = 3;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Test.method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method(), target);
  }

  // map<string, string> parameter = 4;
  if (!this->_internal_parameter().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "action.Test.ParameterEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "action.Test.ParameterEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameter().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameter().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameter().begin();
          it != this->_internal_parameter().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Test_ParameterEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameter().begin();
          it != this->_internal_parameter().end(); ++it) {
        target = Test_ParameterEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string categories = 5;
  for (int i = 0, n = this->_internal_categories_size(); i < n; i++) {
    const auto& s = this->_internal_categories(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Test.categories");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Test)
  return target;
}

size_t Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Test)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> parameter = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameter_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameter().begin();
      it != this->_internal_parameter().end(); ++it) {
    total_size += Test_ParameterEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string categories = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(categories_.size());
  for (int i = 0, n = categories_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      categories_.Get(i));
  }

  // string assembly = 1;
  if (!this->_internal_assembly().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assembly());
  }

  // string class = 2;
  if (!this->_internal_class_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_());
  }

  // string method = 3;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Test::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Test::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Test::GetClassData() const { return &_class_data_; }

void Test::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Test *>(to)->MergeFrom(
      static_cast<const Test &>(from));
}


void Test::MergeFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Test)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  parameter_.MergeFrom(from.parameter_);
  categories_.MergeFrom(from.categories_);
  if (!from._internal_assembly().empty()) {
    _internal_set_assembly(from._internal_assembly());
  }
  if (!from._internal_class_().empty()) {
    _internal_set_class_(from._internal_class_());
  }
  if (!from._internal_method().empty()) {
    _internal_set_method(from._internal_method());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Test::CopyFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  return true;
}

void Test::InternalSwap(Test* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parameter_.InternalSwap(&other->parameter_);
  categories_.InternalSwap(&other->categories_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &assembly_, lhs_arena,
      &other->assembly_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &class__, lhs_arena,
      &other->class__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &method_, lhs_arena,
      &other->method_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Test::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[14]);
}

// ===================================================================

class Tests::_Internal {
 public:
};

Tests::Tests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.Tests)
}
Tests::Tests(const Tests& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tests_(from.tests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:action.Tests)
}

inline void Tests::SharedCtor() {
}

Tests::~Tests() {
  // @@protoc_insertion_point(destructor:action.Tests)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Tests::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Tests::ArenaDtor(void* object) {
  Tests* _this = reinterpret_cast< Tests* >(object);
  (void)_this;
}
void Tests::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tests::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tests::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Tests)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tests::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .action.Test tests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tests::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Tests)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .action.Test tests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Tests)
  return target;
}

size_t Tests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Tests)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .action.Test tests = 1;
  total_size += 1UL * this->_internal_tests_size();
  for (const auto& msg : this->tests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tests::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Tests::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tests::GetClassData() const { return &_class_data_; }

void Tests::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Tests *>(to)->MergeFrom(
      static_cast<const Tests &>(from));
}


void Tests::MergeFrom(const Tests& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Tests)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tests_.MergeFrom(from.tests_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tests::CopyFrom(const Tests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Tests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tests::IsInitialized() const {
  return true;
}

void Tests::InternalSwap(Tests* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tests_.InternalSwap(&other->tests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tests::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[15]);
}

// ===================================================================

class LogData::_Internal {
 public:
};

LogData::LogData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.LogData)
}
LogData::LogData(const LogData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&type_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:action.LogData)
}

inline void LogData::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&type_)) + sizeof(level_));
}

LogData::~LogData() {
  // @@protoc_insertion_point(destructor:action.LogData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogData::ArenaDtor(void* object) {
  LogData* _this = reinterpret_cast< LogData* >(object);
  (void)_this;
}
void LogData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogData::Clear() {
// @@protoc_insertion_point(message_clear_start:action.LogData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&type_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .action.LogType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::action::LogType>(val));
        } else
          goto handle_unusual;
        continue;
      // .action.LogLevel level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::action::LogLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.LogData.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.LogData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .action.LogType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .action.LogLevel level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_level(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.LogData.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.LogData)
  return target;
}

size_t LogData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.LogData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .action.LogType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .action.LogLevel level = 2;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogData::GetClassData() const { return &_class_data_; }

void LogData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogData *>(to)->MergeFrom(
      static_cast<const LogData &>(from));
}


void LogData::MergeFrom(const LogData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.LogData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogData::CopyFrom(const LogData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.LogData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogData::IsInitialized() const {
  return true;
}

void LogData::InternalSwap(LogData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogData, level_)
      + sizeof(LogData::level_)
      - PROTOBUF_FIELD_OFFSET(LogData, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[16]);
}

// ===================================================================

class TestDetails::_Internal {
 public:
};

TestDetails::TestDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  categories_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.TestDetails)
}
TestDetails::TestDetails(const TestDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:action.TestDetails)
}

inline void TestDetails::SharedCtor() {
timeout_ = 0;
}

TestDetails::~TestDetails() {
  // @@protoc_insertion_point(destructor:action.TestDetails)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TestDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestDetails::ArenaDtor(void* object) {
  TestDetails* _this = reinterpret_cast< TestDetails* >(object);
  (void)_this;
}
void TestDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TestDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:action.TestDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  timeout_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 timeout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string categories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_categories();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.TestDetails.categories"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.TestDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 timeout = 1;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_timeout(), target);
  }

  // repeated string categories = 2;
  for (int i = 0, n = this->_internal_categories_size(); i < n; i++) {
    const auto& s = this->_internal_categories(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.TestDetails.categories");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.TestDetails)
  return target;
}

size_t TestDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.TestDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string categories = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(categories_.size());
  for (int i = 0, n = categories_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      categories_.Get(i));
  }

  // int32 timeout = 1;
  if (this->_internal_timeout() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TestDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestDetails::GetClassData() const { return &_class_data_; }

void TestDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TestDetails *>(to)->MergeFrom(
      static_cast<const TestDetails &>(from));
}


void TestDetails::MergeFrom(const TestDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.TestDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  if (from._internal_timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestDetails::CopyFrom(const TestDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.TestDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDetails::IsInitialized() const {
  return true;
}

void TestDetails::InternalSwap(TestDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  categories_.InternalSwap(&other->categories_);
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestDetails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[17]);
}

// ===================================================================

class PerformanceData::_Internal {
 public:
};

PerformanceData::PerformanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.PerformanceData)
}
PerformanceData::PerformanceData(const PerformanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    checkpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_checkpoint().empty()) {
    checkpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_checkpoint(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cpu_, &from.cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:action.PerformanceData)
}

inline void PerformanceData::SharedCtor() {
checkpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  checkpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpu_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(fps_));
}

PerformanceData::~PerformanceData() {
  // @@protoc_insertion_point(destructor:action.PerformanceData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PerformanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  checkpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PerformanceData::ArenaDtor(void* object) {
  PerformanceData* _this = reinterpret_cast< PerformanceData* >(object);
  (void)_this;
}
void PerformanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerformanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerformanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:action.PerformanceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkpoint_.ClearToEmpty();
  ::memset(&cpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&cpu_)) + sizeof(fps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerformanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string checkpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_checkpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.PerformanceData.checkpoint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cpu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          memory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerformanceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.PerformanceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string checkpoint = 1;
  if (!this->_internal_checkpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpoint().data(), static_cast<int>(this->_internal_checkpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.PerformanceData.checkpoint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_checkpoint(), target);
  }

  // float cpu = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu = this->_internal_cpu();
  uint32_t raw_cpu;
  memcpy(&raw_cpu, &tmp_cpu, sizeof(tmp_cpu));
  if (raw_cpu != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_cpu(), target);
  }

  // float memory = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory = this->_internal_memory();
  uint32_t raw_memory;
  memcpy(&raw_memory, &tmp_memory, sizeof(tmp_memory));
  if (raw_memory != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_memory(), target);
  }

  // float fps = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = this->_internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_fps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.PerformanceData)
  return target;
}

size_t PerformanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.PerformanceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string checkpoint = 1;
  if (!this->_internal_checkpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpoint());
  }

  // float cpu = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu = this->_internal_cpu();
  uint32_t raw_cpu;
  memcpy(&raw_cpu, &tmp_cpu, sizeof(tmp_cpu));
  if (raw_cpu != 0) {
    total_size += 1 + 4;
  }

  // float memory = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory = this->_internal_memory();
  uint32_t raw_memory;
  memcpy(&raw_memory, &tmp_memory, sizeof(tmp_memory));
  if (raw_memory != 0) {
    total_size += 1 + 4;
  }

  // float fps = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = this->_internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerformanceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerformanceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerformanceData::GetClassData() const { return &_class_data_; }

void PerformanceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerformanceData *>(to)->MergeFrom(
      static_cast<const PerformanceData &>(from));
}


void PerformanceData::MergeFrom(const PerformanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.PerformanceData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_checkpoint().empty()) {
    _internal_set_checkpoint(from._internal_checkpoint());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu = from._internal_cpu();
  uint32_t raw_cpu;
  memcpy(&raw_cpu, &tmp_cpu, sizeof(tmp_cpu));
  if (raw_cpu != 0) {
    _internal_set_cpu(from._internal_cpu());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory = from._internal_memory();
  uint32_t raw_memory;
  memcpy(&raw_memory, &tmp_memory, sizeof(tmp_memory));
  if (raw_memory != 0) {
    _internal_set_memory(from._internal_memory());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fps = from._internal_fps();
  uint32_t raw_fps;
  memcpy(&raw_fps, &tmp_fps, sizeof(tmp_fps));
  if (raw_fps != 0) {
    _internal_set_fps(from._internal_fps());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerformanceData::CopyFrom(const PerformanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.PerformanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformanceData::IsInitialized() const {
  return true;
}

void PerformanceData::InternalSwap(PerformanceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &checkpoint_, lhs_arena,
      &other->checkpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerformanceData, fps_)
      + sizeof(PerformanceData::fps_)
      - PROTOBUF_FIELD_OFFSET(PerformanceData, cpu_)>(
          reinterpret_cast<char*>(&cpu_),
          reinterpret_cast<char*>(&other->cpu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformanceData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[18]);
}

// ===================================================================

class Response::_Internal {
 public:
  static const ::action::Screenshot& screenshot(const Response* msg);
  static const ::action::Connect& connect(const Response* msg);
  static const ::action::Tests& tests(const Response* msg);
  static const ::action::LogData& log(const Response* msg);
  static const ::action::TestDetails& testdetails(const Response* msg);
  static const ::action::PerformanceData& performance(const Response* msg);
};

const ::action::Screenshot&
Response::_Internal::screenshot(const Response* msg) {
  return *msg->payload_.screenshot_;
}
const ::action::Connect&
Response::_Internal::connect(const Response* msg) {
  return *msg->payload_.connect_;
}
const ::action::Tests&
Response::_Internal::tests(const Response* msg) {
  return *msg->payload_.tests_;
}
const ::action::LogData&
Response::_Internal::log(const Response* msg) {
  return *msg->payload_.log_;
}
const ::action::TestDetails&
Response::_Internal::testdetails(const Response* msg) {
  return *msg->payload_.testdetails_;
}
const ::action::PerformanceData&
Response::_Internal::performance(const Response* msg) {
  return *msg->payload_.performance_;
}
void Response::set_allocated_screenshot(::action::Screenshot* screenshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (screenshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::Screenshot>::GetOwningArena(screenshot);
    if (message_arena != submessage_arena) {
      screenshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screenshot, submessage_arena);
    }
    set_has_screenshot();
    payload_.screenshot_ = screenshot;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Response.screenshot)
}
void Response::set_allocated_connect(::action::Connect* connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::Connect>::GetOwningArena(connect);
    if (message_arena != submessage_arena) {
      connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    payload_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Response.connect)
}
void Response::set_allocated_tests(::action::Tests* tests) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (tests) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::Tests>::GetOwningArena(tests);
    if (message_arena != submessage_arena) {
      tests = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tests, submessage_arena);
    }
    set_has_tests();
    payload_.tests_ = tests;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Response.tests)
}
void Response::set_allocated_log(::action::LogData* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::LogData>::GetOwningArena(log);
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    set_has_log();
    payload_.log_ = log;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Response.log)
}
void Response::set_allocated_testdetails(::action::TestDetails* testdetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (testdetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::TestDetails>::GetOwningArena(testdetails);
    if (message_arena != submessage_arena) {
      testdetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, testdetails, submessage_arena);
    }
    set_has_testdetails();
    payload_.testdetails_ = testdetails;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Response.testDetails)
}
void Response::set_allocated_performance(::action::PerformanceData* performance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (performance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::action::PerformanceData>::GetOwningArena(performance);
    if (message_arena != submessage_arena) {
      performance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, performance, submessage_arena);
    }
    set_has_performance();
    payload_.performance_ = performance;
  }
  // @@protoc_insertion_point(field_set_allocated:action.Response.performance)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:action.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    actionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actionid().empty()) {
    actionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actionid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&actiontype_, &from.actiontype_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&actiontype_)) + sizeof(success_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kVisible: {
      _internal_set_visible(from._internal_visible());
      break;
    }
    case kData: {
      _internal_set_data(from._internal_data());
      break;
    }
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kScreenshot: {
      _internal_mutable_screenshot()->::action::Screenshot::MergeFrom(from._internal_screenshot());
      break;
    }
    case kConnect: {
      _internal_mutable_connect()->::action::Connect::MergeFrom(from._internal_connect());
      break;
    }
    case kTests: {
      _internal_mutable_tests()->::action::Tests::MergeFrom(from._internal_tests());
      break;
    }
    case kLog: {
      _internal_mutable_log()->::action::LogData::MergeFrom(from._internal_log());
      break;
    }
    case kTestDetails: {
      _internal_mutable_testdetails()->::action::TestDetails::MergeFrom(from._internal_testdetails());
      break;
    }
    case kPerformance: {
      _internal_mutable_performance()->::action::PerformanceData::MergeFrom(from._internal_performance());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:action.Response)
}

inline void Response::SharedCtor() {
actionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  actionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&actiontype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&actiontype_)) + sizeof(success_));
clear_has_payload();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:action.Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  actionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:action.Response)
  switch (payload_case()) {
    case kVisible: {
      // No need to clear
      break;
    }
    case kData: {
      payload_.data_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kValue: {
      payload_.value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kScreenshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.screenshot_;
      }
      break;
    }
    case kConnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.connect_;
      }
      break;
    }
    case kTests: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.tests_;
      }
      break;
    }
    case kLog: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.log_;
      }
      break;
    }
    case kTestDetails: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.testdetails_;
      }
      break;
    }
    case kPerformance: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.performance_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:action.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionid_.ClearToEmpty();
  ::memset(&actiontype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&actiontype_)) + sizeof(success_));
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string actionID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_actionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Response.actionID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.ActionType actionType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_actiontype(static_cast<::action::ActionType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool visible = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_visible(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "action.Response.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.Screenshot screenshot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_screenshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.Connect connect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.Tests tests = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tests(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.LogData log = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.TestDetails testDetails = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_testdetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .action.PerformanceData performance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_performance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:action.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string actionID = 1;
  if (!this->_internal_actionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actionid().data(), static_cast<int>(this->_internal_actionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Response.actionID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_actionid(), target);
  }

  // .action.ActionType actionType = 2;
  if (this->_internal_actiontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_actiontype(), target);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // bool visible = 4;
  if (_internal_has_visible()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_visible(), target);
  }

  // bytes data = 5;
  if (_internal_has_data()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_data(), target);
  }

  // string value = 6;
  if (_internal_has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "action.Response.value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value(), target);
  }

  // .action.Screenshot screenshot = 7;
  if (_internal_has_screenshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::screenshot(this), target, stream);
  }

  // .action.Connect connect = 8;
  if (_internal_has_connect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::connect(this), target, stream);
  }

  // .action.Tests tests = 9;
  if (_internal_has_tests()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tests(this), target, stream);
  }

  // .action.LogData log = 10;
  if (_internal_has_log()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::log(this), target, stream);
  }

  // .action.TestDetails testDetails = 11;
  if (_internal_has_testdetails()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::testdetails(this), target, stream);
  }

  // .action.PerformanceData performance = 12;
  if (_internal_has_performance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::performance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actionID = 1;
  if (!this->_internal_actionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actionid());
  }

  // .action.ActionType actionType = 2;
  if (this->_internal_actiontype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actiontype());
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  switch (payload_case()) {
    // bool visible = 4;
    case kVisible: {
      total_size += 1 + 1;
      break;
    }
    // bytes data = 5;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
      break;
    }
    // string value = 6;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
      break;
    }
    // .action.Screenshot screenshot = 7;
    case kScreenshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.screenshot_);
      break;
    }
    // .action.Connect connect = 8;
    case kConnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.connect_);
      break;
    }
    // .action.Tests tests = 9;
    case kTests: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.tests_);
      break;
    }
    // .action.LogData log = 10;
    case kLog: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.log_);
      break;
    }
    // .action.TestDetails testDetails = 11;
    case kTestDetails: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.testdetails_);
      break;
    }
    // .action.PerformanceData performance = 12;
    case kPerformance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.performance_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }

void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Response *>(to)->MergeFrom(
      static_cast<const Response &>(from));
}


void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action.Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_actionid().empty()) {
    _internal_set_actionid(from._internal_actionid());
  }
  if (from._internal_actiontype() != 0) {
    _internal_set_actiontype(from._internal_actiontype());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  switch (from.payload_case()) {
    case kVisible: {
      _internal_set_visible(from._internal_visible());
      break;
    }
    case kData: {
      _internal_set_data(from._internal_data());
      break;
    }
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kScreenshot: {
      _internal_mutable_screenshot()->::action::Screenshot::MergeFrom(from._internal_screenshot());
      break;
    }
    case kConnect: {
      _internal_mutable_connect()->::action::Connect::MergeFrom(from._internal_connect());
      break;
    }
    case kTests: {
      _internal_mutable_tests()->::action::Tests::MergeFrom(from._internal_tests());
      break;
    }
    case kLog: {
      _internal_mutable_log()->::action::LogData::MergeFrom(from._internal_log());
      break;
    }
    case kTestDetails: {
      _internal_mutable_testdetails()->::action::TestDetails::MergeFrom(from._internal_testdetails());
      break;
    }
    case kPerformance: {
      _internal_mutable_performance()->::action::PerformanceData::MergeFrom(from._internal_performance());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actionid_, lhs_arena,
      &other->actionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, success_)
      + sizeof(Response::success_)
      - PROTOBUF_FIELD_OFFSET(Response, actiontype_)>(
          reinterpret_cast<char*>(&actiontype_),
          reinterpret_cast<char*>(&other->actiontype_));
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_action_2eproto_getter, &descriptor_table_action_2eproto_once,
      file_level_metadata_action_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace action
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::action::Device* Arena::CreateMaybeMessage< ::action::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::action::DeviceRequest* Arena::CreateMaybeMessage< ::action::DeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::DeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::action::DeviceResponse* Arena::CreateMaybeMessage< ::action::DeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::DeviceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::action::InteractionRequest* Arena::CreateMaybeMessage< ::action::InteractionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::InteractionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::action::InteractionResponse* Arena::CreateMaybeMessage< ::action::InteractionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::InteractionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::action::SetAttr* Arena::CreateMaybeMessage< ::action::SetAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::SetAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::action::GetAttr* Arena::CreateMaybeMessage< ::action::GetAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::GetAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::action::MoveOffset* Arena::CreateMaybeMessage< ::action::MoveOffset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::MoveOffset >(arena);
}
template<> PROTOBUF_NOINLINE ::action::MoveElement* Arena::CreateMaybeMessage< ::action::MoveElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::MoveElement >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Touch* Arena::CreateMaybeMessage< ::action::Touch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::Touch >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Request* Arena::CreateMaybeMessage< ::action::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Connect* Arena::CreateMaybeMessage< ::action::Connect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::Connect >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Screenshot* Arena::CreateMaybeMessage< ::action::Screenshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::Screenshot >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Test_ParameterEntry_DoNotUse* Arena::CreateMaybeMessage< ::action::Test_ParameterEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::Test_ParameterEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Test* Arena::CreateMaybeMessage< ::action::Test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::Test >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Tests* Arena::CreateMaybeMessage< ::action::Tests >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::Tests >(arena);
}
template<> PROTOBUF_NOINLINE ::action::LogData* Arena::CreateMaybeMessage< ::action::LogData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::LogData >(arena);
}
template<> PROTOBUF_NOINLINE ::action::TestDetails* Arena::CreateMaybeMessage< ::action::TestDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::TestDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::action::PerformanceData* Arena::CreateMaybeMessage< ::action::PerformanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::PerformanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::action::Response* Arena::CreateMaybeMessage< ::action::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::action::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
